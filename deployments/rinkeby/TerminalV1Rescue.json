{
  "address": "0x86b8833A776139725115623eCE989C51C9E3eEA8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IFundingCycles",
          "name": "_fundingCycles",
          "type": "address"
        },
        {
          "internalType": "contract ITicketBooth",
          "name": "_ticketBooth",
          "type": "address"
        },
        {
          "internalType": "contract IOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AddToBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "PrintTickets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Rescued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ToggleRescue",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "addToBalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITerminal",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowMigration",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingCycles",
      "outputs": [
        {
          "internalType": "contract IFundingCycles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "contract ITerminal",
          "name": "",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITerminal",
          "name": "",
          "type": "address"
        }
      ],
      "name": "migrationIsAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_preferUnstakedTickets",
          "type": "bool"
        }
      ],
      "name": "printTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rescueAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketBooth",
      "outputs": [
        {
          "internalType": "contract ITicketBooth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "toggleRescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x101ba5243c43d84e4b740fc80cdae1d8a9be26664bdb01619b67607731c509e8",
  "receipt": {
    "to": null,
    "from": "0x95C54D662c31672b2E9C572959AcF93cc883a0A5",
    "contractAddress": "0x86b8833A776139725115623eCE989C51C9E3eEA8",
    "transactionIndex": 0,
    "gasUsed": "1412767",
    "logsBloom": "0x
    "blockHash": "0x87d54caa480a9cba00d29535a58bf2ddea4f95b7cafb927f5204e86bd6914189",
    "transactionHash": "0x101ba5243c43d84e4b740fc80cdae1d8a9be26664bdb01619b67607731c509e8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10501923,
        "transactionHash": "0x101ba5243c43d84e4b740fc80cdae1d8a9be26664bdb01619b67607731c509e8",
        "address": "0x86b8833A776139725115623eCE989C51C9E3eEA8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000095c54d662c31672b2e9c572959acf93cc883a0a5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x87d54caa480a9cba00d29535a58bf2ddea4f95b7cafb927f5204e86bd6914189"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10501923,
        "transactionHash": "0x101ba5243c43d84e4b740fc80cdae1d8a9be26664bdb01619b67607731c509e8",
        "address": "0x86b8833A776139725115623eCE989C51C9E3eEA8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000095c54d662c31672b2e9c572959acf93cc883a0a5",
          "0x000000000000000000000000af28bcb48c40dbc86f52d459a6562f658fc94b1e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x87d54caa480a9cba00d29535a58bf2ddea4f95b7cafb927f5204e86bd6914189"
      }
    ],
    "blockNumber": 10501923,
    "cumulativeGasUsed": "1412767",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x34A1d33e49907ADFE05fb4E21411a06a8c4300eE",
    "0x234985c467E90483bA42fB2C7C2f71A1874D805D",
    "0x0d038636a670E8bd8cF7D56BC4626f2a6446cF11",
    "0x5dA2E4Ba83569fb7A22a4aDE14bBEf1236168406",
    "0x88d8c9E98E6EdE75252c2473abc9724965fe7474",
    "0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e"
  ],
  "solcInputHash": "b611a48ccf636fef65065ee937e0c17d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IFundingCycles\",\"name\":\"_fundingCycles\",\"type\":\"address\"},{\"internalType\":\"contract ITicketBooth\",\"name\":\"_ticketBooth\",\"type\":\"address\"},{\"internalType\":\"contract IOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AddToBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"PrintTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Rescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ToggleRescue\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"addToBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITerminal\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowMigration\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycles\",\"outputs\":[{\"internalType\":\"contract IFundingCycles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract ITerminal\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITerminal\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrationIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_preferUnstakedTickets\",\"type\":\"bool\"}],\"name\":\"printTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rescueAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketBooth\",\"outputs\":[{\"internalType\":\"contract ITicketBooth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleRescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToBalance(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to which the funds received belong.\"}},\"constructor\":{\"params\":{\"_fundingCycles\":\"A funding cycle configuration store.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A Projects contract which mints ERC-721's that represent project ownership and transfers.\",\"_terminalDirectory\":\"A directory of a project's current Juicebox terminal to receive payments in.\",\"_ticketBooth\":\"A contract that manages Ticket printing and redeeming.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"printTickets(uint256,uint256,address,string,bool)\":{\"details\":\"Only a project's owner or a designated operator can print tickets.\",\"params\":{\"_amount\":\"The amount of tickets to print.\",\"_beneficiary\":\"The address to send the printed tickets to.\",\"_memo\":\"A memo to leave with the printing.\",\"_preferUnstakedTickets\":\"If there is a preference to unstake the printed tickets.\",\"_projectId\":\"The ID of the project to print tickets for.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescue(uint256,address,uint256)\":{\"details\":\"Callable only by project owner, if rescue is allowed by the projectId, if the project's current funding cycle is non recurring.\",\"params\":{\"_amount\":\"The amount to rescue as a fixed point number.\",\"_beneficiary\":\"The recipient of the resucued funds.\",\"_projectId\":\"The ID of the project whose ETH is being resued.\"}},\"toggleRescue(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to allow rescuing.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToBalance(uint256)\":{\"notice\":\" Receives and allocates funds belonging to the specified project.\"},\"allowMigration(address)\":{\"notice\":\" NO-OP\"},\"balanceOf(uint256)\":{\"notice\":\"The amount of ETH that each project is responsible for.\"},\"fundingCycles()\":{\"notice\":\"The contract storing all funding cycle configurations.\"},\"migrate(uint256,address)\":{\"notice\":\" NO-OP\"},\"operatorStore()\":{\"notice\":\"A contract storing operator assignments.\"},\"pay(uint256,address,string,bool)\":{\"notice\":\" NO-OP\"},\"printTickets(uint256,uint256,address,string,bool)\":{\"notice\":\" Allows a project to print tickets for a specified beneficiary.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"rescue(uint256,address,uint256)\":{\"notice\":\"A function that burns the supply of the dead address for a project. \"},\"rescueAllowed(uint256)\":{\"notice\":\"The addresses that are allowed to be rescued.\"},\"terminalDirectory()\":{\"notice\":\"The directory of terminals.\"},\"ticketBooth()\":{\"notice\":\"The contract that manages Ticket printing and redeeming.\"},\"toggleRescue(uint256)\":{\"notice\":\" Allows certain projects to migrate to have funds rescued.\"}},\"notice\":\" Terminal allowing allow listed projects with one-time funding cycles to rescue stuck ETH.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TerminalV1Rescue.sol\":\"TerminalV1Rescue\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0xfcba81e4d8281c31627d1f157ee06efed0cd8875ed6bcc216773701ba5e21d1d\",\"license\":\"UNLICENSED\"},\"@paulrberg/contracts/math/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\",\"keccak256\":\"0xcf4e9eaa70b33ae4e949fb9c48ad13737dd807030e5555aca515dc555e10c9e4\",\"license\":\"UNLICENSED\"},\"contracts/TerminalV1Rescue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\nimport '@paulrberg/contracts/math/PRBMathUD60x18.sol';\\n\\nimport './interfaces/ITerminalV1Rescue.sol';\\nimport './abstract/JuiceboxProject.sol';\\nimport './abstract/Operatable.sol';\\n\\nimport './libraries/Operations.sol';\\n\\n/**\\n  @notice \\n  Terminal allowing allow listed projects with one-time funding cycles to rescue stuck ETH.\\n*/\\ncontract TerminalV1Rescue is Operatable, ITerminalV1Rescue, ITerminal, ReentrancyGuard, Ownable {\\n  /// @notice The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  IProjects public immutable override projects;\\n\\n  /// @notice The contract storing all funding cycle configurations.\\n  IFundingCycles public immutable override fundingCycles;\\n\\n  /// @notice The contract that manages Ticket printing and redeeming.\\n  ITicketBooth public immutable override ticketBooth;\\n\\n  /// @notice The directory of terminals.\\n  ITerminalDirectory public immutable override terminalDirectory;\\n\\n  /// @notice The amount of ETH that each project is responsible for.\\n  mapping(uint256 => uint256) public override balanceOf;\\n\\n  /// @notice The addresses that are allowed to be rescued.\\n  mapping(uint256 => bool) public override rescueAllowed;\\n\\n  // Whether or not a particular contract is available for projects to migrate their funds and Tickets to.\\n  mapping(ITerminal => bool) public override migrationIsAllowed;\\n\\n  /** \\n    @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _fundingCycles A funding cycle configuration store.\\n    @param _ticketBooth A contract that manages Ticket printing and redeeming.\\n    @param _operatorStore A contract storing operator assignments.\\n    @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\\n  */\\n  constructor(\\n    IProjects _projects,\\n    IFundingCycles _fundingCycles,\\n    ITicketBooth _ticketBooth,\\n    IOperatorStore _operatorStore,\\n    ITerminalDirectory _terminalDirectory,\\n    address _owner\\n  ) Operatable(_operatorStore) {\\n    require(\\n      _projects != IProjects(address(0)) &&\\n        _fundingCycles != IFundingCycles(address(0)) &&\\n        _ticketBooth != ITicketBooth(address(0)) &&\\n        _terminalDirectory != ITerminalDirectory(address(0)) &&\\n        _owner != address(0),\\n      'zero address'\\n    );\\n    projects = _projects;\\n    fundingCycles = _fundingCycles;\\n    ticketBooth = _ticketBooth;\\n    terminalDirectory = _terminalDirectory;\\n\\n    transferOwnership(_owner);\\n  }\\n\\n  /** \\n    @notice \\n    Allows a project to print tickets for a specified beneficiary.\\n\\n    @dev\\n    Only a project's owner or a designated operator can print tickets.\\n\\n    @param _projectId The ID of the project to print tickets for.\\n    @param _amount The amount of tickets to print.\\n    @param _beneficiary The address to send the printed tickets to.\\n    @param _memo A memo to leave with the printing.\\n    @param _preferUnstakedTickets If there is a preference to unstake the printed tickets.\\n  */\\n  function printTickets(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address _beneficiary,\\n    string memory _memo,\\n    bool _preferUnstakedTickets\\n  )\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, Operations.PrintTickets)\\n  {\\n    // Can't send to the zero address.\\n    require(_beneficiary != address(0), 'zero address');\\n\\n    // Print the project's tickets for the beneficiary.\\n    ticketBooth.print(_beneficiary, _projectId, _amount, _preferUnstakedTickets);\\n\\n    emit PrintTickets(_projectId, _beneficiary, _amount, _memo, msg.sender);\\n  }\\n\\n  /** \\n    @notice\\n    A function that burns the supply of the dead address for a project. \\n\\n    @dev\\n    Callable only by project owner, if rescue is allowed by the projectId, if the project's current funding cycle is non recurring.\\n\\n    @param _projectId The ID of the project whose ETH is being resued.\\n    @param _beneficiary The recipient of the resucued funds.\\n    @param _amount The amount to rescue as a fixed point number.\\n  */\\n  function rescue(\\n    uint256 _projectId,\\n    address payable _beneficiary,\\n    uint256 _amount\\n  ) external override nonReentrant {\\n    // Must be project owner.\\n    require(msg.sender == projects.ownerOf(_projectId), 'not owner');\\n\\n    // Project must be allow listed.\\n    require(rescueAllowed[_projectId], 'not allowed');\\n\\n    // Amount must have been specified.\\n    require(_amount > 0, 'must be rescuing something');\\n\\n    // Get a referrence to the original balance.\\n    uint256 _originalBalance = balanceOf[_projectId];\\n\\n    // Balance must exist.\\n    require(_originalBalance >= _amount, 'not enough to rescue');\\n\\n    // Get a reference to the current funding cycle for the project.\\n    FundingCycle memory _fundingCycle = fundingCycles.get(fundingCycles.latestIdOf(_projectId));\\n\\n    // Only one-time funding cycles are rescuable.\\n    require(_fundingCycle.discountRate == 201, 'cant rescue');\\n\\n    balanceOf[_projectId] = balanceOf[_projectId] - _amount;\\n\\n    // Send funds to beneficiary.\\n    if (_amount > 0) Address.sendValue(_beneficiary, _amount);\\n\\n    emit Rescued(_projectId, _beneficiary, _originalBalance, _amount, msg.sender);\\n  }\\n\\n  /**\\n    @notice \\n    Receives and allocates funds belonging to the specified project.\\n\\n    @param _projectId The ID of the project to which the funds received belong.\\n  */\\n  function addToBalance(uint256 _projectId) external payable override {\\n    require(rescueAllowed[_projectId], 'not allowed');\\n    balanceOf[_projectId] = balanceOf[_projectId] + msg.value;\\n    emit AddToBalance(_projectId, msg.value, msg.sender);\\n  }\\n\\n  /**\\n    @notice \\n    Allows certain projects to migrate to have funds rescued.\\n\\n    @param _projectId The ID of the project to allow rescuing.\\n  */\\n  function toggleRescue(uint256 _projectId) external override onlyOwner {\\n    rescueAllowed[_projectId] = !rescueAllowed[_projectId];\\n\\n    emit ToggleRescue(_projectId, rescueAllowed[_projectId], msg.sender);\\n  }\\n\\n  /**\\n    @notice \\n    NO-OP\\n  */\\n  function migrate(uint256, ITerminal) external pure override {\\n    require(false, 'cant migrate');\\n  }\\n\\n  /**\\n    @notice \\n    NO-OP\\n  */\\n  function allowMigration(ITerminal) external pure override {\\n    require(false, 'cant allow migration');\\n  }\\n\\n  /**\\n    @notice \\n    NO-OP\\n  */\\n  function pay(\\n    uint256,\\n    address,\\n    string calldata,\\n    bool\\n  ) external payable override returns (uint256) {\\n    require(false, 'cant pay');\\n    return 0;\\n  }\\n}\\n\",\"keccak256\":\"0x78f1fdd5cd7d29e8ad0de342e74a2502e1b6e2d43afc9908c7bfd47b1944d079\",\"license\":\"MIT\"},\"contracts/abstract/JuiceboxProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./../interfaces/ITerminalV1.sol\\\";\\n\\n/** \\n  @notice A contract that inherits from JuiceboxProject can use Juicebox as a business-model-as-a-service.\\n  @dev The owner of the contract makes admin decisions such as:\\n    - Which address is the funding cycle owner, which can tap funds from the funding cycle.\\n    - Should this project's Tickets be migrated to a new TerminalV1. \\n*/\\nabstract contract JuiceboxProject is IERC721Receiver, Ownable {\\n    /// @notice The direct deposit terminals.\\n    ITerminalDirectory public immutable terminalDirectory;\\n\\n    /// @notice The ID of the project that should be used to forward this contract's received payments.\\n    uint256 public projectId;\\n\\n    /** \\n      @param _projectId The ID of the project that should be used to forward this contract's received payments.\\n      @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n    constructor(uint256 _projectId, ITerminalDirectory _terminalDirectory) {\\n        projectId = _projectId;\\n        terminalDirectory = _terminalDirectory;\\n    }\\n\\n    receive() external payable {}\\n\\n    /** \\n      @notice Withdraws funds stored in this contract.\\n      @param _beneficiary The address to send the funds to.\\n      @param _amount The amount to send.\\n    */\\n    function withdraw(address payable _beneficiary, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        Address.sendValue(_beneficiary, _amount);\\n    }\\n\\n    /** \\n      @notice Allows the project that is being managed to be set.\\n      @param _projectId The ID of the project that is being managed.\\n    */\\n    function setProjectId(uint256 _projectId) external onlyOwner {\\n        projectId = _projectId;\\n    }\\n\\n    /** \\n      @notice Make a payment to this project.\\n      @param _beneficiary The address who will receive tickets from this fee.\\n      @param _memo A memo that will be included in the published event.\\n      @param _preferUnstakedTickets Whether ERC20's should be claimed automatically if they have been issued.\\n    */\\n    function pay(\\n        address _beneficiary,\\n        string calldata _memo,\\n        bool _preferUnstakedTickets\\n    ) external payable {\\n        require(projectId != 0, \\\"JuiceboxProject::pay: PROJECT_NOT_FOUND\\\");\\n\\n        // Get the terminal for this contract's project.\\n        ITerminal _terminal = terminalDirectory.terminalOf(projectId);\\n\\n        // There must be a terminal.\\n        require(\\n            _terminal != ITerminal(address(0)),\\n            \\\"JuiceboxProject::pay: TERMINAL_NOT_FOUND\\\"\\n        );\\n\\n        _terminal.pay{value: msg.value}(\\n            projectId,\\n            _beneficiary,\\n            _memo,\\n            _preferUnstakedTickets\\n        );\\n    }\\n\\n    /** \\n        @notice Transfer the ownership of the project to a new owner.  \\n        @dev This contract will no longer be able to reconfigure or tap funds from this project.\\n        @param _projects The projects contract.\\n        @param _newOwner The new project owner.\\n        @param _projectId The ID of the project to transfer ownership of.\\n        @param _data Arbitrary data to include in the transaction.\\n    */\\n    function transferProjectOwnership(\\n        IProjects _projects,\\n        address _newOwner,\\n        uint256 _projectId,\\n        bytes calldata _data\\n    ) external onlyOwner {\\n        _projects.safeTransferFrom(address(this), _newOwner, _projectId, _data);\\n    }\\n\\n    /** \\n      @notice Allows this contract to receive a project.\\n    */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) public pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function setOperator(\\n        IOperatorStore _operatorStore,\\n        address _operator,\\n        uint256 _projectId,\\n        uint256[] calldata _permissionIndexes\\n    ) external onlyOwner {\\n        _operatorStore.setOperator(_operator, _projectId, _permissionIndexes);\\n    }\\n\\n    function setOperators(\\n        IOperatorStore _operatorStore,\\n        address[] calldata _operators,\\n        uint256[] calldata _projectIds,\\n        uint256[][] calldata _permissionIndexes\\n    ) external onlyOwner {\\n        _operatorStore.setOperators(\\n            _operators,\\n            _projectIds,\\n            _permissionIndexes\\n        );\\n    }\\n\\n    /** \\n      @notice Take a fee for this project from this contract.\\n      @param _amount The payment amount.\\n      @param _beneficiary The address who will receive tickets from this fee.\\n      @param _memo A memo that will be included in the published event.\\n      @param _preferUnstakedTickets Whether ERC20's should be claimed automatically if they have been issued.\\n    */\\n    function _takeFee(\\n        uint256 _amount,\\n        address _beneficiary,\\n        string memory _memo,\\n        bool _preferUnstakedTickets\\n    ) internal {\\n        require(projectId != 0, \\\"JuiceboxProject::takeFee: PROJECT_NOT_FOUND\\\");\\n        // Find the terminal for this contract's project.\\n        ITerminal _terminal = terminalDirectory.terminalOf(projectId);\\n\\n        // There must be a terminal.\\n        require(\\n            _terminal != ITerminal(address(0)),\\n            \\\"JuiceboxProject::takeFee: TERMINAL_NOT_FOUND\\\"\\n        );\\n\\n        // There must be enough funds in the contract to take the fee.\\n        require(\\n            address(this).balance >= _amount,\\n            \\\"JuiceboxProject::takeFee: INSUFFICIENT_FUNDS\\\"\\n        );\\n\\n        // Send funds to the terminal.\\n        _terminal.pay{value: _amount}(\\n            projectId,\\n            _beneficiary,\\n            _memo,\\n            _preferUnstakedTickets\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x98a138bf282912827a8c4959ebf98ed820b93080da2bb9a714e139b4f20a127c\",\"license\":\"MIT\"},\"contracts/abstract/Operatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./../interfaces/IOperatable.sol\\\";\\n\\nabstract contract Operatable is IOperatable {\\n    modifier requirePermission(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _index\\n    ) {\\n        require(\\n            msg.sender == _account ||\\n                operatorStore.hasPermission(\\n                    msg.sender,\\n                    _account,\\n                    _domain,\\n                    _index\\n                ),\\n            \\\"Operatable: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requirePermissionAllowingWildcardDomain(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _index\\n    ) {\\n        require(\\n            msg.sender == _account ||\\n                operatorStore.hasPermission(\\n                    msg.sender,\\n                    _account,\\n                    _domain,\\n                    _index\\n                ) ||\\n                operatorStore.hasPermission(msg.sender, _account, 0, _index),\\n            \\\"Operatable: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requirePermissionAcceptingAlternateAddress(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _index,\\n        address _alternate\\n    ) {\\n        require(\\n            msg.sender == _account ||\\n                operatorStore.hasPermission(\\n                    msg.sender,\\n                    _account,\\n                    _domain,\\n                    _index\\n                ) ||\\n                msg.sender == _alternate,\\n            \\\"Operatable: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice A contract storing operator assignments.\\n    IOperatorStore public immutable override operatorStore;\\n\\n    /** \\n      @param _operatorStore A contract storing operator assignments.\\n    */\\n    constructor(IOperatorStore _operatorStore) {\\n        operatorStore = _operatorStore;\\n    }\\n}\\n\",\"keccak256\":\"0x5401b4930a799c898c61bbf3c27331f8f097fa326124ba95d2e119dc49bdd44e\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectPaymentAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IDirectPaymentAddress {\\n    event Forward(\\n        address indexed payer,\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256 value,\\n        string memo,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function terminalDirectory() external returns (ITerminalDirectory);\\n\\n    function projectId() external returns (uint256);\\n\\n    function memo() external returns (string memory);\\n}\\n\",\"keccak256\":\"0x6e1770ac38a8fd90c51745f98a06b0461963ffae3116dab3761fda175e10a3da\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalV1.sol\\\";\\n\\nenum BallotState {\\n    Approved,\\n    Active,\\n    Failed,\\n    Standby\\n}\\n\\ninterface IFundingCycleBallot {\\n    function duration() external view returns (uint256);\\n\\n    function state(uint256 _fundingCycleId, uint256 _configured)\\n        external\\n        view\\n        returns (BallotState);\\n}\\n\",\"keccak256\":\"0xb1dc2e498f770df403048a2f18b6490158fffebf349cddf2e09627bb370c4cf8\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingCycles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IPrices.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IFundingCycleBallot.sol\\\";\\n\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\nstruct FundingCycle {\\n    // A unique number that's incremented for each new funding cycle, starting with 1.\\n    uint256 id;\\n    // The ID of the project contract that this funding cycle belongs to.\\n    uint256 projectId;\\n    // The number of this funding cycle for the project.\\n    uint256 number;\\n    // The ID of a previous funding cycle that this one is based on.\\n    uint256 basedOn;\\n    // The time when this funding cycle was last configured.\\n    uint256 configured;\\n    // The number of cycles that this configuration should last for before going back to the last permanent.\\n    uint256 cycleLimit;\\n    // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\n    uint256 weight;\\n    // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\n    IFundingCycleBallot ballot;\\n    // The time when this funding cycle will become active.\\n    uint256 start;\\n    // The number of seconds until this funding cycle's surplus is redistributed.\\n    uint256 duration;\\n    // The amount that this funding cycle is targeting in terms of the currency.\\n    uint256 target;\\n    // The currency that the target is measured in.\\n    uint256 currency;\\n    // The percentage of each payment to send as a fee to the Juicebox admin.\\n    uint256 fee;\\n    // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\n    uint256 discountRate;\\n    // The amount of available funds that have been tapped by the project in terms of the currency.\\n    uint256 tapped;\\n    // A packed list of extra data. The first 8 bytes are reserved for versioning.\\n    uint256 metadata;\\n}\\n\\nstruct FundingCycleProperties {\\n    uint256 target;\\n    uint256 currency;\\n    uint256 duration;\\n    uint256 cycleLimit;\\n    uint256 discountRate;\\n    IFundingCycleBallot ballot;\\n}\\n\\ninterface IFundingCycles {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        FundingCycleProperties _properties,\\n        uint256 metadata,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        uint256 newTappedAmount,\\n        address caller\\n    );\\n\\n    event Init(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 number,\\n        uint256 previous,\\n        uint256 weight,\\n        uint256 start\\n    );\\n\\n    function latestIdOf(uint256 _projectId) external view returns (uint256);\\n\\n    function count() external view returns (uint256);\\n\\n    function BASE_WEIGHT() external view returns (uint256);\\n\\n    function MAX_CYCLE_LIMIT() external view returns (uint256);\\n\\n    function get(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (FundingCycle memory);\\n\\n    function queuedOf(uint256 _projectId)\\n        external\\n        view\\n        returns (FundingCycle memory);\\n\\n    function currentOf(uint256 _projectId)\\n        external\\n        view\\n        returns (FundingCycle memory);\\n\\n    function currentBallotStateOf(uint256 _projectId)\\n        external\\n        view\\n        returns (BallotState);\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleProperties calldata _properties,\\n        uint256 _metadata,\\n        uint256 _fee,\\n        bool _configureActiveFundingCycle\\n    ) external returns (FundingCycle memory fundingCycle);\\n\\n    function tap(uint256 _projectId, uint256 _amount)\\n        external\\n        returns (FundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0xab47f0f4c52eba9943c9a16b61fc868e24bf5592fc3fbeb1b15f205f239b3a58\",\"license\":\"MIT\"},\"contracts/interfaces/IModAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IModAllocator {\\n    event Allocate(\\n        uint256 indexed projectId,\\n        uint256 indexed forProjectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    function allocate(\\n        uint256 _projectId,\\n        uint256 _forProjectId,\\n        address _beneficiary\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb9ae52aec55cdbe79d57e09fee092d71533110a34c284066a91bf2bf8551585c\",\"license\":\"MIT\"},\"contracts/interfaces/IModStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IOperatorStore.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IModAllocator.sol\\\";\\n\\nstruct PayoutMod {\\n    bool preferUnstaked;\\n    uint16 percent;\\n    uint48 lockedUntil;\\n    address payable beneficiary;\\n    IModAllocator allocator;\\n    uint56 projectId;\\n}\\n\\nstruct TicketMod {\\n    bool preferUnstaked;\\n    uint16 percent;\\n    uint48 lockedUntil;\\n    address payable beneficiary;\\n}\\n\\ninterface IModStore {\\n    event SetPayoutMod(\\n        uint256 indexed projectId,\\n        uint256 indexed configuration,\\n        PayoutMod mods,\\n        address caller\\n    );\\n\\n    event SetTicketMod(\\n        uint256 indexed projectId,\\n        uint256 indexed configuration,\\n        TicketMod mods,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function payoutModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        returns (PayoutMod[] memory);\\n\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        returns (TicketMod[] memory);\\n\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        PayoutMod[] memory _mods\\n    ) external;\\n\\n    function setTicketMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        TicketMod[] memory _mods\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0517bdfc354006aa76d0ef32c61c0794508158b8be3633b1aa2c36b5b1cfadad\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IOperatorStore.sol\\\";\\n\\ninterface IOperatable {\\n    function operatorStore() external view returns (IOperatorStore);\\n}\\n\",\"keccak256\":\"0xcb7dca7db6fece5017a55c52d2b41a3659c0f7640261f56f36157ad9a583381d\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IOperatorStore {\\n    event SetOperator(\\n        address indexed operator,\\n        address indexed account,\\n        uint256 indexed domain,\\n        uint256[] permissionIndexes,\\n        uint256 packed\\n    );\\n\\n    function permissionsOf(\\n        address _operator,\\n        address _account,\\n        uint256 _domain\\n    ) external view returns (uint256);\\n\\n    function hasPermission(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256 _permissionIndex\\n    ) external view returns (bool);\\n\\n    function hasPermissions(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external view returns (bool);\\n\\n    function setOperator(\\n        address _operator,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external;\\n\\n    function setOperators(\\n        address[] calldata _operators,\\n        uint256[] calldata _domains,\\n        uint256[][] calldata _permissionIndexes\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe89167e611fd4be161eab80dfdd24da66bdb37a80aad583bf05a0c934117b8f6\",\"license\":\"MIT\"},\"contracts/interfaces/IPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface IPrices {\\n    event AddFeed(uint256 indexed currency, AggregatorV3Interface indexed feed);\\n\\n    function feedDecimalAdjuster(uint256 _currency) external returns (uint256);\\n\\n    function targetDecimals() external returns (uint256);\\n\\n    function feedFor(uint256 _currency)\\n        external\\n        returns (AggregatorV3Interface);\\n\\n    function getETHPriceFor(uint256 _currency) external view returns (uint256);\\n\\n    function addFeed(AggregatorV3Interface _priceFeed, uint256 _currency)\\n        external;\\n}\\n\",\"keccak256\":\"0xbba3169f4b457e3b6bbd95574e50e34c048438c83bc35d32b832747a779a935d\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 indexed handle,\\n        string uri,\\n        ITerminal terminal,\\n        address caller\\n    );\\n\\n    event SetHandle(\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n    event TransferHandle(\\n        uint256 indexed projectId,\\n        address indexed to,\\n        bytes32 indexed handle,\\n        bytes32 newHandle,\\n        address caller\\n    );\\n\\n    event ClaimHandle(\\n        address indexed account,\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event ChallengeHandle(\\n        bytes32 indexed handle,\\n        uint256 challengeExpiry,\\n        address caller\\n    );\\n\\n    event RenewHandle(\\n        bytes32 indexed handle,\\n        uint256 indexed projectId,\\n        address caller\\n    );\\n\\n    function count() external view returns (uint256);\\n\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function transferAddressFor(bytes32 _handle)\\n        external\\n        returns (address receiver);\\n\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        string calldata _uri,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\n\\n    function transferHandle(\\n        uint256 _projectId,\\n        address _to,\\n        bytes32 _newHandle\\n    ) external returns (bytes32 _handle);\\n\\n    function claimHandle(\\n        bytes32 _handle,\\n        address _for,\\n        uint256 _projectId\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8737307dc78cee4afa738a6771dabfaf3378f3678f67490f3ce6ca3ac37ac654\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './ITerminalDirectory.sol';\\n\\ninterface ITerminal {\\n  function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n  function migrationIsAllowed(ITerminal _terminal) external view returns (bool);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferUnstakedTickets\\n  ) external payable returns (uint256 fundingCycleId);\\n\\n  function addToBalance(uint256 _projectId) external payable;\\n\\n  function allowMigration(ITerminal _contract) external;\\n\\n  function migrate(uint256 _projectId, ITerminal _to) external;\\n}\\n\",\"keccak256\":\"0x177800cf28a70e7a13ecc57afb69cf93aaebc28d8b1a1ced8809c5f70dface77\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event DeployAddress(\\n        uint256 indexed projectId,\\n        string memo,\\n        address indexed caller\\n    );\\n\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    event SetPayerPreferences(\\n        address indexed account,\\n        address beneficiary,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function beneficiaryOf(address _account) external returns (address);\\n\\n    function unstakedTicketsPreferenceOf(address _account)\\n        external\\n        returns (bool);\\n\\n    function addressesOf(uint256 _projectId)\\n        external\\n        view\\n        returns (IDirectPaymentAddress[] memory);\\n\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n\\n    function setPayerPreferences(\\n        address _beneficiary,\\n        bool _preferUnstakedTickets\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd30bb42ee6a7a8c35b63fd5445b0b737e39925deb12b9f3f307cb47ca0933a4b\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './ITicketBooth.sol';\\nimport './IFundingCycles.sol';\\nimport './IYielder.sol';\\nimport './IProjects.sol';\\nimport './IModStore.sol';\\nimport './IPrices.sol';\\nimport './ITerminal.sol';\\nimport './IOperatorStore.sol';\\n\\nstruct FundingCycleMetadata {\\n  uint256 reservedRate;\\n  uint256 bondingCurveRate;\\n  uint256 reconfigurationBondingCurveRate;\\n}\\n\\ninterface ITerminalV1 {\\n  event Pay(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    address indexed beneficiary,\\n    uint256 amount,\\n    string note,\\n    address caller\\n  );\\n\\n  event AddToBalance(uint256 indexed projectId, uint256 value, address caller);\\n\\n  event AllowMigration(ITerminal allowed);\\n\\n  event Migrate(uint256 indexed projectId, ITerminal indexed to, uint256 _amount, address caller);\\n\\n  event Configure(uint256 indexed fundingCycleId, uint256 indexed projectId, address caller);\\n\\n  event Tap(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    address indexed beneficiary,\\n    uint256 amount,\\n    uint256 currency,\\n    uint256 netTransferAmount,\\n    uint256 beneficiaryTransferAmount,\\n    uint256 govFeeAmount,\\n    address caller\\n  );\\n  event Redeem(\\n    address indexed holder,\\n    address indexed beneficiary,\\n    uint256 indexed _projectId,\\n    uint256 amount,\\n    uint256 returnAmount,\\n    address caller\\n  );\\n\\n  event PrintReserveTickets(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    address indexed beneficiary,\\n    uint256 count,\\n    uint256 beneficiaryTicketAmount,\\n    address caller\\n  );\\n\\n  event DistributeToPayoutMod(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    PayoutMod mod,\\n    uint256 modCut,\\n    address caller\\n  );\\n  event DistributeToTicketMod(\\n    uint256 indexed fundingCycleId,\\n    uint256 indexed projectId,\\n    TicketMod mod,\\n    uint256 modCut,\\n    address caller\\n  );\\n  event AppointGovernance(address governance);\\n\\n  event AcceptGovernance(address governance);\\n\\n  event PrintPreminedTickets(\\n    uint256 indexed projectId,\\n    address indexed beneficiary,\\n    uint256 amount,\\n    uint256 currency,\\n    string memo,\\n    address caller\\n  );\\n\\n  event Deposit(uint256 amount);\\n\\n  event EnsureTargetLocalWei(uint256 target);\\n\\n  event SetYielder(IYielder newYielder);\\n\\n  event SetFee(uint256 _amount);\\n\\n  event SetTargetLocalWei(uint256 amount);\\n\\n  function governance() external view returns (address payable);\\n\\n  function pendingGovernance() external view returns (address payable);\\n\\n  function projects() external view returns (IProjects);\\n\\n  function fundingCycles() external view returns (IFundingCycles);\\n\\n  function ticketBooth() external view returns (ITicketBooth);\\n\\n  function prices() external view returns (IPrices);\\n\\n  function modStore() external view returns (IModStore);\\n\\n  function reservedTicketBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function canPrintPreminedTickets(uint256 _projectId) external view returns (bool);\\n\\n  function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function currentOverflowOf(uint256 _projectId) external view returns (uint256);\\n\\n  function claimableOverflowOf(\\n    address _account,\\n    uint256 _amount,\\n    uint256 _projectId\\n  ) external view returns (uint256);\\n\\n  function fee() external view returns (uint256);\\n\\n  function deploy(\\n    address _owner,\\n    bytes32 _handle,\\n    string calldata _uri,\\n    FundingCycleProperties calldata _properties,\\n    FundingCycleMetadata calldata _metadata,\\n    PayoutMod[] memory _payoutMods,\\n    TicketMod[] memory _ticketMods\\n  ) external;\\n\\n  function configure(\\n    uint256 _projectId,\\n    FundingCycleProperties calldata _properties,\\n    FundingCycleMetadata calldata _metadata,\\n    PayoutMod[] memory _payoutMods,\\n    TicketMod[] memory _ticketMods\\n  ) external returns (uint256);\\n\\n  function printPreminedTickets(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    address _beneficiary,\\n    string memory _memo,\\n    bool _preferUnstakedTickets\\n  ) external;\\n\\n  function tap(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedWei\\n  ) external returns (uint256);\\n\\n  function redeem(\\n    address _account,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _minReturnedWei,\\n    address payable _beneficiary,\\n    bool _preferUnstaked\\n  ) external returns (uint256 returnAmount);\\n\\n  function printReservedTickets(uint256 _projectId)\\n    external\\n    returns (uint256 reservedTicketsToPrint);\\n\\n  function setFee(uint256 _fee) external;\\n\\n  function appointGovernance(address payable _pendingGovernance) external;\\n\\n  function acceptGovernance() external;\\n}\\n\",\"keccak256\":\"0x41abc27ae0b3e37195c90280d088e822af06f75a3d9caec84ef1144b5dcc3e5f\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalV1Rescue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './ITicketBooth.sol';\\nimport './IFundingCycles.sol';\\nimport './IYielder.sol';\\nimport './IProjects.sol';\\nimport './IModStore.sol';\\nimport './ITerminal.sol';\\nimport './IOperatorStore.sol';\\nimport './ITreasuryExtension.sol';\\n\\nstruct FundingCycleMetadata2 {\\n  uint256 reservedRate;\\n  uint256 bondingCurveRate;\\n  uint256 reconfigurationBondingCurveRate;\\n  bool payIsPaused;\\n  bool ticketPrintingIsAllowed;\\n  ITreasuryExtension treasuryExtension;\\n}\\n\\ninterface ITerminalV1Rescue {\\n  event AddToBalance(uint256 indexed projectId, uint256 value, address caller);\\n  event PrintTickets(\\n    uint256 indexed projectId,\\n    address indexed beneficiary,\\n    uint256 amount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event Rescued(\\n    uint256 projectId,\\n    address beneficiary,\\n    uint256 originalBalance,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event ToggleRescue(uint256 projectId, bool newValue, address caller);\\n\\n  function projects() external view returns (IProjects);\\n\\n  function fundingCycles() external view returns (IFundingCycles);\\n\\n  function ticketBooth() external view returns (ITicketBooth);\\n\\n  function rescueAllowed(uint256 _projectId) external view returns (bool);\\n\\n  function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n  function rescue(\\n    uint256 _projectId,\\n    address payable _beneficiary,\\n    uint256 _amount\\n  ) external;\\n\\n  function toggleRescue(uint256 _projectId) external;\\n\\n  function printTickets(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address _beneficiary,\\n    string memory _memo,\\n    bool _preferUnstakedTickets\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa88406d072c0c007f9244962264259320ddb3d44bcbb026d7e21d9aa9554ca30\",\"license\":\"MIT\"},\"contracts/interfaces/ITicketBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\nimport \\\"./ITickets.sol\\\";\\n\\ninterface ITicketBooth {\\n    event Issue(\\n        uint256 indexed projectId,\\n        string name,\\n        string symbol,\\n        address caller\\n    );\\n    event Print(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        bool convertedTickets,\\n        bool preferUnstakedTickets,\\n        address controller\\n    );\\n\\n    event Redeem(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        uint256 stakedTickets,\\n        bool preferUnstaked,\\n        address controller\\n    );\\n\\n    event Stake(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Unstake(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Lock(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Unlock(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Transfer(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        address indexed recipient,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    function ticketsOf(uint256 _projectId) external view returns (ITickets);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function lockedBalanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lockedBalanceBy(\\n        address _operator,\\n        address _holder,\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function stakedBalanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stakedTotalSupplyOf(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n    function balanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256 _result);\\n\\n    function issue(\\n        uint256 _projectId,\\n        string calldata _name,\\n        string calldata _symbol\\n    ) external;\\n\\n    function print(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstakedTickets\\n    ) external;\\n\\n    function redeem(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstaked\\n    ) external;\\n\\n    function stake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function lock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unlock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function transfer(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        address _recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8593f40267c3c98e54d2b17e4306e1c951a59201d4df3214a1d6e8ef49dd5d9b\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITickets is IERC20 {\\n    function print(address _account, uint256 _amount) external;\\n\\n    function redeem(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x694dd5b030b138ac3cc2957fd096f79267babef76d517667091d45fa33edb222\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasuryExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface ITreasuryExtension {\\n  function ETHValue(uint256 _projectId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x248e631e660b6e3f888522eb946c000e1f0296e7efcdbd61b2a419eaf1149f90\",\"license\":\"MIT\"},\"contracts/interfaces/IYielder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ITerminalV1.sol\\\";\\n\\n// In constructure, give unlimited access for TerminalV1 to take money from this.\\ninterface IYielder {\\n    function deposited() external view returns (uint256);\\n\\n    function getCurrentBalance() external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 _amount, address payable _beneficiary) external;\\n\\n    function withdrawAll(address payable _beneficiary)\\n        external\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xfb564d51d4298d124fe631e6ee36c88130b26ab3ed555b7772b5bd9669d3dff9\",\"license\":\"MIT\"},\"contracts/libraries/Operations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary Operations {\\n  uint256 public constant Configure = 1;\\n  uint256 public constant PrintPreminedTickets = 2;\\n  uint256 public constant Redeem = 3;\\n  uint256 public constant Migrate = 4;\\n  uint256 public constant SetHandle = 5;\\n  uint256 public constant SetUri = 6;\\n  uint256 public constant ClaimHandle = 7;\\n  uint256 public constant RenewHandle = 8;\\n  uint256 public constant Issue = 9;\\n  uint256 public constant Stake = 10;\\n  uint256 public constant Unstake = 11;\\n  uint256 public constant Transfer = 12;\\n  uint256 public constant Lock = 13;\\n  uint256 public constant SetPayoutMods = 14;\\n  uint256 public constant SetTicketMods = 15;\\n  uint256 public constant SetTerminal = 16;\\n  uint256 public constant PrintTickets = 17;\\n}\\n\",\"keccak256\":\"0xa1a020b014d0cf765fb61dc46f9ee91384fa8c68d93b131a90b9182baab6b1d1\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explictly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cf85249f8e5a1bef6d0b5cb291bf25deec0feaa469b373ced3f25aa98da3075\",\"license\":\"WTFPL\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimised for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding towards zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdc6b47a506b52834c45984320f3a74bfe13a433806471cdd5570105e233c1337\",\"license\":\"WTFPL\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162001b1438038062001b1483398101604081905262000035916200025d565b606083901b6001600160601b031916608052600160005562000057336200013a565b6001600160a01b038616158015906200007857506001600160a01b03851615155b80156200008d57506001600160a01b03841615155b8015620000a257506001600160a01b03821615155b8015620000b757506001600160a01b03811615155b620000f85760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064015b60405180910390fd5b6001600160601b0319606087811b821660a05286811b821660c05285811b821660e05283901b16610100526200012e816200018c565b50505050505062000307565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001546001600160a01b03163314620001e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000ef565b6001600160a01b0381166200024f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000ef565b6200025a816200013a565b50565b60008060008060008060c087890312156200027757600080fd5b86516200028481620002f1565b60208801519096506200029781620002f1565b6040880151909550620002aa81620002f1565b6060880151909450620002bd81620002f1565b6080880151909350620002d081620002f1565b60a0880151909250620002e381620002f1565b809150509295509295509295565b6001600160a01b03811681146200025a57600080fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6117966200037e60003960006101c80152600081816102fc0152610de1015260008181610236015261079901526000818161027d015281816105510152610b5301526000818161039d0152610c5d01526117966000f3fe6080604052600436106101295760003560e01c80638da5cb5b116100a5578063a84673b411610074578063b423262711610059578063b4232627146103bf578063b9f11091146103df578063f2fde38b1461040f57600080fd5b8063a84673b41461034b578063ad007d631461038b57600080fd5b80638da5cb5b1461029f5780639713eea6146102ca5780639b602d60146102ea5780639cc7f7081461031e57600080fd5b80636abcf8e3116100fc578063882af667116100e1578063882af667146102245780638a19e355146102585780638b79543c1461026b57600080fd5b80636abcf8e3146101b6578063715018a61461020f57600080fd5b806302c8986f1461012e578063308a20ad146101545780633483b3a614610176578063405b84fa14610196575b600080fd5b61014161013c3660046113d3565b61042f565b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061017461016f36600461123e565b61047f565b005b34801561018257600080fd5b5061017461019136600461139b565b6104ca565b3480156101a257600080fd5b506101746101b1366004611477565b61099e565b3480156101c257600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161014b565b34801561021b57600080fd5b506101746109e6565b34801561023057600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b610174610266366004611369565b610a59565b34801561027757600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ab57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166101ea565b3480156102d657600080fd5b506101746102e53660046114a7565b610b24565b3480156102f657600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b34801561032a57600080fd5b50610141610339366004611369565b60026020526000908152604090205481565b34801561035757600080fd5b5061037b610366366004611369565b60036020526000908152604090205460ff1681565b604051901515815260200161014b565b34801561039757600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cb57600080fd5b506101746103da366004611369565b610e9a565b3480156103eb57600080fd5b5061037b6103fa36600461123e565b60046020526000908152604090205460ff1681565b34801561041b57600080fd5b5061017461042a36600461123e565b610f88565b60405162461bcd60e51b815260206004820152600860248201527f63616e742070617900000000000000000000000000000000000000000000000060448201526000906064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527f63616e7420616c6c6f77206d6967726174696f6e0000000000000000000000006044820152606401610476565b50565b6002600054141561051d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610476565b60026000556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156105a857600080fd5b505afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e09190611262565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065a5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e657200000000000000000000000000000000000000000000006044820152606401610476565b60008381526003602052604090205460ff166106b85760405162461bcd60e51b815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610476565b600081116107085760405162461bcd60e51b815260206004820152601a60248201527f6d757374206265207265736375696e6720736f6d657468696e670000000000006044820152606401610476565b600083815260026020526040902054818110156107675760405162461bcd60e51b815260206004820152601460248201527f6e6f7420656e6f75676820746f207265736375650000000000000000000000006044820152606401610476565b6040517fcdce9b2b000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690639507d39a90829063cdce9b2b9060240160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190611382565b6040518263ffffffff1660e01b815260040161084e91815260200190565b6102006040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f919061129c565b9050806101a0015160c9146108f65760405162461bcd60e51b815260206004820152600b60248201527f63616e74207265736375650000000000000000000000000000000000000000006044820152606401610476565b6000858152600260205260409020546109109084906116bb565b600086815260026020526040902055821561092f5761092f8484611081565b6040805186815273ffffffffffffffffffffffffffffffffffffffff86166020820152908101839052606081018490523360808201527f7ec66f89b3c67a6d09dcaa2e204935e4d5ea53840d0be6e62d83bb1af0c3377d9060a00160405180910390a150506001600055505050565b60405162461bcd60e51b815260206004820152600c60248201527f63616e74206d69677261746500000000000000000000000000000000000000006044820152606401610476565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a4d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b610a5760006111ac565b565b60008181526003602052604090205460ff16610ab75760405162461bcd60e51b815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610476565b600081815260026020526040902054610ad19034906116a3565b600082815260026020908152604091829020929092558051348152339281019290925282917f08534c4f6026a713959f9286d994e8430e6d0fd11045360abf782bacaa288d43910160405180910390a250565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015610baa57600080fd5b505afa158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be29190611262565b8560113373ffffffffffffffffffffffffffffffffffffffff84161480610cd757506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610c9f57600080fd5b505afa158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd7919061127f565b610d235760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610476565b73ffffffffffffffffffffffffffffffffffffffff8616610d865760405162461bcd60e51b815260206004820152600c60248201527f7a65726f206164647265737300000000000000000000000000000000000000006044820152606401610476565b6040517fe0826c8900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018a90526044820189905285151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063e0826c8990608401600060405180830381600087803b158015610e2557600080fd5b505af1158015610e39573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff16887fb745c0ba548003047e8dc09b0dbf5eaed8ae262b5fe0221b4439af8cc4019905898833604051610e8893929190611591565b60405180910390a35050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610f015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b60008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff9182161590811790925583518581529116151591810191909152338183015290517ffb0ae25af3bb35883efb31c3b77816b9c9cd80ed6c07526b320ab0bd1427139a9181900360600190a150565b60015473ffffffffffffffffffffffffffffffffffffffff163314610fef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b73ffffffffffffffffffffffffffffffffffffffff81166110785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610476565b6104c7816111ac565b804710156110d15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610476565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461112b576040519150601f19603f3d011682016040523d82523d6000602084013e611130565b606091505b50509050806111a75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610476565b505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b803561122e81611752565b919050565b805161122e81611730565b60006020828403121561125057600080fd5b813561125b81611730565b9392505050565b60006020828403121561127457600080fd5b815161125b81611730565b60006020828403121561129157600080fd5b815161125b81611752565b600061020082840312156112af57600080fd5b6112b761162a565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261130360e08401611233565b60e0820152610100838101519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0928301519281019290925250919050565b60006020828403121561137b57600080fd5b5035919050565b60006020828403121561139457600080fd5b5051919050565b6000806000606084860312156113b057600080fd5b8335925060208401356113c281611730565b929592945050506040919091013590565b6000806000806000608086880312156113eb57600080fd5b8535945060208601356113fd81611730565b9350604086013567ffffffffffffffff8082111561141a57600080fd5b818801915088601f83011261142e57600080fd5b81358181111561143d57600080fd5b89602082850101111561144f57600080fd5b602083019550809450505050606086013561146981611752565b809150509295509295909350565b6000806040838503121561148a57600080fd5b82359150602083013561149c81611730565b809150509250929050565b600080600080600060a086880312156114bf57600080fd5b85359450602080870135945060408701356114d981611730565b9350606087013567ffffffffffffffff808211156114f657600080fd5b818901915089601f83011261150a57600080fd5b81358181111561151c5761151c611701565b61154c847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611654565b91508082528a8482850101111561156257600080fd5b808484018584013760008482840101525080945050505061158560808701611223565b90509295509295909350565b83815260006020606081840152845180606085015260005b818110156115c5578681018301518582016080015282016115a9565b818111156115d7576000608083870101525b5073ffffffffffffffffffffffffffffffffffffffff9490941660408401525050601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160160800192915050565b604051610200810167ffffffffffffffff8111828210171561164e5761164e611701565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561169b5761169b611701565b604052919050565b600082198211156116b6576116b66116d2565b500190565b6000828210156116cd576116cd6116d2565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146104c757600080fd5b80151581146104c757600080fdfea26469706673582212208282875ce6f85655c110ff88c2e37d93dc98aff8b17d9ac66a9118622d806b6664736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101295760003560e01c80638da5cb5b116100a5578063a84673b411610074578063b423262711610059578063b4232627146103bf578063b9f11091146103df578063f2fde38b1461040f57600080fd5b8063a84673b41461034b578063ad007d631461038b57600080fd5b80638da5cb5b1461029f5780639713eea6146102ca5780639b602d60146102ea5780639cc7f7081461031e57600080fd5b80636abcf8e3116100fc578063882af667116100e1578063882af667146102245780638a19e355146102585780638b79543c1461026b57600080fd5b80636abcf8e3146101b6578063715018a61461020f57600080fd5b806302c8986f1461012e578063308a20ad146101545780633483b3a614610176578063405b84fa14610196575b600080fd5b61014161013c3660046113d3565b61042f565b6040519081526020015b60405180910390f35b34801561016057600080fd5b5061017461016f36600461123e565b61047f565b005b34801561018257600080fd5b5061017461019136600461139b565b6104ca565b3480156101a257600080fd5b506101746101b1366004611477565b61099e565b3480156101c257600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161014b565b34801561021b57600080fd5b506101746109e6565b34801561023057600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b610174610266366004611369565b610a59565b34801561027757600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ab57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166101ea565b3480156102d657600080fd5b506101746102e53660046114a7565b610b24565b3480156102f657600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b34801561032a57600080fd5b50610141610339366004611369565b60026020526000908152604090205481565b34801561035757600080fd5b5061037b610366366004611369565b60036020526000908152604090205460ff1681565b604051901515815260200161014b565b34801561039757600080fd5b506101ea7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cb57600080fd5b506101746103da366004611369565b610e9a565b3480156103eb57600080fd5b5061037b6103fa36600461123e565b60046020526000908152604090205460ff1681565b34801561041b57600080fd5b5061017461042a36600461123e565b610f88565b60405162461bcd60e51b815260206004820152600860248201527f63616e742070617900000000000000000000000000000000000000000000000060448201526000906064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527f63616e7420616c6c6f77206d6967726174696f6e0000000000000000000000006044820152606401610476565b50565b6002600054141561051d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610476565b60026000556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156105a857600080fd5b505afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e09190611262565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065a5760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e657200000000000000000000000000000000000000000000006044820152606401610476565b60008381526003602052604090205460ff166106b85760405162461bcd60e51b815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610476565b600081116107085760405162461bcd60e51b815260206004820152601a60248201527f6d757374206265207265736375696e6720736f6d657468696e670000000000006044820152606401610476565b600083815260026020526040902054818110156107675760405162461bcd60e51b815260206004820152601460248201527f6e6f7420656e6f75676820746f207265736375650000000000000000000000006044820152606401610476565b6040517fcdce9b2b000000000000000000000000000000000000000000000000000000008152600481018590526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690639507d39a90829063cdce9b2b9060240160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190611382565b6040518263ffffffff1660e01b815260040161084e91815260200190565b6102006040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f919061129c565b9050806101a0015160c9146108f65760405162461bcd60e51b815260206004820152600b60248201527f63616e74207265736375650000000000000000000000000000000000000000006044820152606401610476565b6000858152600260205260409020546109109084906116bb565b600086815260026020526040902055821561092f5761092f8484611081565b6040805186815273ffffffffffffffffffffffffffffffffffffffff86166020820152908101839052606081018490523360808201527f7ec66f89b3c67a6d09dcaa2e204935e4d5ea53840d0be6e62d83bb1af0c3377d9060a00160405180910390a150506001600055505050565b60405162461bcd60e51b815260206004820152600c60248201527f63616e74206d69677261746500000000000000000000000000000000000000006044820152606401610476565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a4d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b610a5760006111ac565b565b60008181526003602052604090205460ff16610ab75760405162461bcd60e51b815260206004820152600b60248201527f6e6f7420616c6c6f7765640000000000000000000000000000000000000000006044820152606401610476565b600081815260026020526040902054610ad19034906116a3565b600082815260026020908152604091829020929092558051348152339281019290925282917f08534c4f6026a713959f9286d994e8430e6d0fd11045360abf782bacaa288d43910160405180910390a250565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015610baa57600080fd5b505afa158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be29190611262565b8560113373ffffffffffffffffffffffffffffffffffffffff84161480610cd757506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610c9f57600080fd5b505afa158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd7919061127f565b610d235760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a454400000000000000006044820152606401610476565b73ffffffffffffffffffffffffffffffffffffffff8616610d865760405162461bcd60e51b815260206004820152600c60248201527f7a65726f206164647265737300000000000000000000000000000000000000006044820152606401610476565b6040517fe0826c8900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018a90526044820189905285151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063e0826c8990608401600060405180830381600087803b158015610e2557600080fd5b505af1158015610e39573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff16887fb745c0ba548003047e8dc09b0dbf5eaed8ae262b5fe0221b4439af8cc4019905898833604051610e8893929190611591565b60405180910390a35050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610f015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b60008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff9182161590811790925583518581529116151591810191909152338183015290517ffb0ae25af3bb35883efb31c3b77816b9c9cd80ed6c07526b320ab0bd1427139a9181900360600190a150565b60015473ffffffffffffffffffffffffffffffffffffffff163314610fef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b73ffffffffffffffffffffffffffffffffffffffff81166110785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610476565b6104c7816111ac565b804710156110d15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610476565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461112b576040519150601f19603f3d011682016040523d82523d6000602084013e611130565b606091505b50509050806111a75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610476565b505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b803561122e81611752565b919050565b805161122e81611730565b60006020828403121561125057600080fd5b813561125b81611730565b9392505050565b60006020828403121561127457600080fd5b815161125b81611730565b60006020828403121561129157600080fd5b815161125b81611752565b600061020082840312156112af57600080fd5b6112b761162a565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261130360e08401611233565b60e0820152610100838101519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0928301519281019290925250919050565b60006020828403121561137b57600080fd5b5035919050565b60006020828403121561139457600080fd5b5051919050565b6000806000606084860312156113b057600080fd5b8335925060208401356113c281611730565b929592945050506040919091013590565b6000806000806000608086880312156113eb57600080fd5b8535945060208601356113fd81611730565b9350604086013567ffffffffffffffff8082111561141a57600080fd5b818801915088601f83011261142e57600080fd5b81358181111561143d57600080fd5b89602082850101111561144f57600080fd5b602083019550809450505050606086013561146981611752565b809150509295509295909350565b6000806040838503121561148a57600080fd5b82359150602083013561149c81611730565b809150509250929050565b600080600080600060a086880312156114bf57600080fd5b85359450602080870135945060408701356114d981611730565b9350606087013567ffffffffffffffff808211156114f657600080fd5b818901915089601f83011261150a57600080fd5b81358181111561151c5761151c611701565b61154c847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611654565b91508082528a8482850101111561156257600080fd5b808484018584013760008482840101525080945050505061158560808701611223565b90509295509295909350565b83815260006020606081840152845180606085015260005b818110156115c5578681018301518582016080015282016115a9565b818111156115d7576000608083870101525b5073ffffffffffffffffffffffffffffffffffffffff9490941660408401525050601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160160800192915050565b604051610200810167ffffffffffffffff8111828210171561164e5761164e611701565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561169b5761169b611701565b604052919050565b600082198211156116b6576116b66116d2565b500190565b6000828210156116cd576116cd6116d2565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146104c757600080fd5b80151581146104c757600080fdfea26469706673582212208282875ce6f85655c110ff88c2e37d93dc98aff8b17d9ac66a9118622d806b6664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToBalance(uint256)": {
        "params": {
          "_projectId": "The ID of the project to which the funds received belong."
        }
      },
      "constructor": {
        "params": {
          "_fundingCycles": "A funding cycle configuration store.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A Projects contract which mints ERC-721's that represent project ownership and transfers.",
          "_terminalDirectory": "A directory of a project's current Juicebox terminal to receive payments in.",
          "_ticketBooth": "A contract that manages Ticket printing and redeeming."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "printTickets(uint256,uint256,address,string,bool)": {
        "details": "Only a project's owner or a designated operator can print tickets.",
        "params": {
          "_amount": "The amount of tickets to print.",
          "_beneficiary": "The address to send the printed tickets to.",
          "_memo": "A memo to leave with the printing.",
          "_preferUnstakedTickets": "If there is a preference to unstake the printed tickets.",
          "_projectId": "The ID of the project to print tickets for."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescue(uint256,address,uint256)": {
        "details": "Callable only by project owner, if rescue is allowed by the projectId, if the project's current funding cycle is non recurring.",
        "params": {
          "_amount": "The amount to rescue as a fixed point number.",
          "_beneficiary": "The recipient of the resucued funds.",
          "_projectId": "The ID of the project whose ETH is being resued."
        }
      },
      "toggleRescue(uint256)": {
        "params": {
          "_projectId": "The ID of the project to allow rescuing."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToBalance(uint256)": {
        "notice": " Receives and allocates funds belonging to the specified project."
      },
      "allowMigration(address)": {
        "notice": " NO-OP"
      },
      "balanceOf(uint256)": {
        "notice": "The amount of ETH that each project is responsible for."
      },
      "fundingCycles()": {
        "notice": "The contract storing all funding cycle configurations."
      },
      "migrate(uint256,address)": {
        "notice": " NO-OP"
      },
      "operatorStore()": {
        "notice": "A contract storing operator assignments."
      },
      "pay(uint256,address,string,bool)": {
        "notice": " NO-OP"
      },
      "printTickets(uint256,uint256,address,string,bool)": {
        "notice": " Allows a project to print tickets for a specified beneficiary."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "rescue(uint256,address,uint256)": {
        "notice": "A function that burns the supply of the dead address for a project. "
      },
      "rescueAllowed(uint256)": {
        "notice": "The addresses that are allowed to be rescued."
      },
      "terminalDirectory()": {
        "notice": "The directory of terminals."
      },
      "ticketBooth()": {
        "notice": "The contract that manages Ticket printing and redeeming."
      },
      "toggleRescue(uint256)": {
        "notice": " Allows certain projects to migrate to have funds rescued."
      }
    },
    "notice": " Terminal allowing allow listed projects with one-time funding cycles to rescue stuck ETH.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 160,
        "contract": "contracts/TerminalV1Rescue.sol:TerminalV1Rescue",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 53,
        "contract": "contracts/TerminalV1Rescue.sol:TerminalV1Rescue",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11366,
        "contract": "contracts/TerminalV1Rescue.sol:TerminalV1Rescue",
        "label": "balanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11372,
        "contract": "contracts/TerminalV1Rescue.sol:TerminalV1Rescue",
        "label": "rescueAllowed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 11378,
        "contract": "contracts/TerminalV1Rescue.sol:TerminalV1Rescue",
        "label": "migrationIsAllowed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(ITerminal)17036,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITerminal)17036": {
        "encoding": "inplace",
        "label": "contract ITerminal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(ITerminal)17036,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(ITerminal)17036",
        "label": "mapping(contract ITerminal => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}