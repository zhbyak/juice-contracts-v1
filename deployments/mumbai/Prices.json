{
  "address": "0x7707e2cb8Bb1b1026CF42bf9cf8c6714Ea56Abe8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currency",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract AggregatorV3Interface",
          "name": "feed",
          "type": "address"
        }
      ],
      "name": "AddFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        }
      ],
      "name": "addFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feedDecimalAdjuster",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feedFor",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        }
      ],
      "name": "getETHPriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bcd11b054773ae5070399da555429139f7c8a69733a5c33af908b3fbce5818e",
  "receipt": {
    "to": null,
    "from": "0x95C54D662c31672b2E9C572959AcF93cc883a0A5",
    "contractAddress": "0x7707e2cb8Bb1b1026CF42bf9cf8c6714Ea56Abe8",
    "transactionIndex": 13,
    "gasUsed": "690955",
    "logsBloom": "0x
    "blockHash": "0xcb6c05921a61eae19066eaeda8dd1aa46b9c9ad2840a209d81cd643413ea126e",
    "transactionHash": "0x5bcd11b054773ae5070399da555429139f7c8a69733a5c33af908b3fbce5818e",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 25967483,
        "transactionHash": "0x5bcd11b054773ae5070399da555429139f7c8a69733a5c33af908b3fbce5818e",
        "address": "0x7707e2cb8Bb1b1026CF42bf9cf8c6714Ea56Abe8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000095c54d662c31672b2e9c572959acf93cc883a0a5"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0xcb6c05921a61eae19066eaeda8dd1aa46b9c9ad2840a209d81cd643413ea126e"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 25967483,
        "transactionHash": "0x5bcd11b054773ae5070399da555429139f7c8a69733a5c33af908b3fbce5818e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000095c54d662c31672b2e9c572959acf93cc883a0a5",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000311865f2299e8700000000000000000000000000000000000000000000000027fcae5599ad4f00000000000000000000000000000000000000000000001145407ece0b5f42b24100000000000000000000000000000000000000000000000027cb95efa783b07900000000000000000000000000000000000000000000114540afe671516c50c8",
        "logIndex": 130,
        "blockHash": "0xcb6c05921a61eae19066eaeda8dd1aa46b9c9ad2840a209d81cd643413ea126e"
      }
    ],
    "blockNumber": 25967483,
    "cumulativeGasUsed": "4021315",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b611a48ccf636fef65065ee937e0c17d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"AddFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"addFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feedDecimalAdjuster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feedFor\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"getETHPriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addFeed(address,uint256)\":{\"details\":\"Current feeds can't be modified.\",\"params\":{\"_currency\":\"The currency that the price feed is for.\",\"_feed\":\"The price feed being added.\"}},\"getETHPriceFor(uint256)\":{\"params\":{\"_currency\":\"The currency to get a price for.\"},\"returns\":{\"_0\":\"price The price of ETH with 18 decimals.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addFeed(address,uint256)\":{\"notice\":\" Add a price feed for the price of ETH.\"},\"feedDecimalAdjuster(uint256)\":{\"notice\":\"The number to multiply each price feed by to get to the target decimals.\"},\"feedFor(uint256)\":{\"notice\":\"The available price feeds that can be used to get the price of ETH.\"},\"getETHPriceFor(uint256)\":{\"notice\":\" Gets the current price of ETH for the provided currency.\"},\"targetDecimals()\":{\"notice\":\"The target number of decimals the price feed results have.\"}},\"notice\":\"Manage and normalizes ETH price feeds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Prices.sol\":\"Prices\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x1862840d741dedb36e774534b877a13b5187555e3b78b8d2815f898b0dc02268\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/Prices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IPrices.sol\\\";\\n\\n/** \\n  @notice Manage and normalizes ETH price feeds.\\n*/\\ncontract Prices is IPrices, Ownable {\\n    // --- public constant stored properties --- //\\n\\n    /// @notice The target number of decimals the price feed results have.\\n    uint256 public constant override targetDecimals = 18;\\n\\n    // --- public stored properties --- //\\n\\n    /// @notice The number to multiply each price feed by to get to the target decimals.\\n    mapping(uint256 => uint256) public override feedDecimalAdjuster;\\n\\n    /// @notice The available price feeds that can be used to get the price of ETH.\\n    mapping(uint256 => AggregatorV3Interface) public override feedFor;\\n\\n    // --- external views --- //\\n\\n    /** \\n      @notice \\n      Gets the current price of ETH for the provided currency.\\n      \\n      @param _currency The currency to get a price for.\\n      \\n      @return price The price of ETH with 18 decimals.\\n    */\\n    function getETHPriceFor(uint256 _currency)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        // The 0 currency is ETH itself.\\n        if (_currency == 0) return 10**targetDecimals;\\n\\n        // Get a reference to the feed.\\n        AggregatorV3Interface _feed = feedFor[_currency];\\n\\n        // Feed must exist.\\n        require(\\n            _feed != AggregatorV3Interface(address(0)),\\n            \\\"Prices::getETHPrice: NOT_FOUND\\\"\\n        );\\n\\n        // Get the lateset round information. Only need the price is needed.\\n        (, int256 _price, , , ) = _feed.latestRoundData();\\n\\n        // Multiply the price by the decimal adjuster to get the normalized result.\\n        return uint256(_price) * feedDecimalAdjuster[_currency];\\n    }\\n\\n    // --- external transactions --- //\\n\\n    /** \\n      @notice \\n      Add a price feed for the price of ETH.\\n\\n      @dev\\n      Current feeds can't be modified.\\n\\n      @param _feed The price feed being added.\\n      @param _currency The currency that the price feed is for.\\n    */\\n    function addFeed(AggregatorV3Interface _feed, uint256 _currency)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        // The 0 currency is reserved for ETH.\\n        require(_currency > 0, \\\"Prices::addFeed: RESERVED\\\");\\n\\n        // There can't already be a feed for the specified currency.\\n        require(\\n            feedFor[_currency] == AggregatorV3Interface(address(0)),\\n            \\\"Prices::addFeed: ALREADY_EXISTS\\\"\\n        );\\n\\n        // Get a reference to the number of decimals the feed uses.\\n        uint256 _decimals = _feed.decimals();\\n\\n        // Decimals should be less than or equal to the target number of decimals.\\n        require(_decimals <= targetDecimals, \\\"Prices::addFeed: BAD_DECIMALS\\\");\\n\\n        // Set the feed.\\n        feedFor[_currency] = _feed;\\n\\n        // Set the decimal adjuster for the currency.\\n        feedDecimalAdjuster[_currency] = 10**(targetDecimals - _decimals);\\n\\n        emit AddFeed(_currency, _feed);\\n    }\\n}\\n\",\"keccak256\":\"0xe9a92c24f45ade6d0a664fff4902412b73c2fb66e318782b45d1d87163b89772\",\"license\":\"MIT\"},\"contracts/interfaces/IPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface IPrices {\\n    event AddFeed(uint256 indexed currency, AggregatorV3Interface indexed feed);\\n\\n    function feedDecimalAdjuster(uint256 _currency) external returns (uint256);\\n\\n    function targetDecimals() external returns (uint256);\\n\\n    function feedFor(uint256 _currency)\\n        external\\n        returns (AggregatorV3Interface);\\n\\n    function getETHPriceFor(uint256 _currency) external view returns (uint256);\\n\\n    function addFeed(AggregatorV3Interface _priceFeed, uint256 _currency)\\n        external;\\n}\\n\",\"keccak256\":\"0xbba3169f4b457e3b6bbd95574e50e34c048438c83bc35d32b832747a779a935d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b268061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461012d5780639fa937231461014b578063a967c20b1461015e578063f2fde38b1461017157600080fd5b80630aee17f21461008d57806336c1387e146100c05780633e495e66146100c8578063715018a614610123575b600080fd5b6100ad61009b366004610898565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b6100ad601281565b6100fe6100d6366004610898565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b7565b61012b610184565b005b60005473ffffffffffffffffffffffffffffffffffffffff166100fe565b6100ad610159366004610898565b610216565b61012b61016c36600461086c565b610363565b61012b61017f366004610848565b610684565b60005473ffffffffffffffffffffffffffffffffffffffff16331461020a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61021460006107b4565b565b60008161022f576102296012600a610985565b92915050565b60008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16806102bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5072696365733a3a67657445544850726963653a204e4f545f464f554e4400006044820152606401610201565b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561030357600080fd5b505afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b91906108b1565b50505060008681526001602052604090205490925061035b915082610a4b565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610201565b6000811161044e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5072696365733a3a616464466565643a205245534552564544000000000000006044820152606401610201565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16156104da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5072696365733a3a616464466565643a20414c52454144595f455849535453006044820152606401610201565b60008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561052257600080fd5b505afa158015610536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055a9190610901565b60ff16905060128111156105ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5072696365733a3a616464466565643a204241445f444543494d414c530000006044820152606401610201565b600082815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055610621816012610a88565b61062c90600a610985565b60008381526001602052604080822092909255905173ffffffffffffffffffffffffffffffffffffffff85169184917f39f7e6a3cfe66d8f71a7951583f7e721ef29d4650eddf11122c8df3aa1c772fd9190a3505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610705576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610201565b73ffffffffffffffffffffffffffffffffffffffff81166107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610201565b6107b1816107b4565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805169ffffffffffffffffffff8116811461084357600080fd5b919050565b60006020828403121561085a57600080fd5b813561086581610ace565b9392505050565b6000806040838503121561087f57600080fd5b823561088a81610ace565b946020939093013593505050565b6000602082840312156108aa57600080fd5b5035919050565b600080600080600060a086880312156108c957600080fd5b6108d286610829565b94506020860151935060408601519250606086015191506108f560808701610829565b90509295509295909350565b60006020828403121561091357600080fd5b815160ff8116811461086557600080fd5b600181815b8085111561097d57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561096357610963610a9f565b8085161561097057918102915b93841c9390800290610929565b509250929050565b6000610865838360008261099b57506001610229565b816109a857506000610229565b81600181146109be57600281146109c8576109e4565b6001915050610229565b60ff8411156109d9576109d9610a9f565b50506001821b610229565b5060208310610133831016604e8410600b8410161715610a07575081810a610229565b610a118383610924565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610a4357610a43610a9f565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a8357610a83610a9f565b500290565b600082821015610a9a57610a9a610a9f565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146107b157600080fdfea2646970667358221220b0bd147c3e6f6c6871281b9982beceb28c5fbda09631c9be03b0b0a22b80fb6d64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461012d5780639fa937231461014b578063a967c20b1461015e578063f2fde38b1461017157600080fd5b80630aee17f21461008d57806336c1387e146100c05780633e495e66146100c8578063715018a614610123575b600080fd5b6100ad61009b366004610898565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b6100ad601281565b6100fe6100d6366004610898565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b7565b61012b610184565b005b60005473ffffffffffffffffffffffffffffffffffffffff166100fe565b6100ad610159366004610898565b610216565b61012b61016c36600461086c565b610363565b61012b61017f366004610848565b610684565b60005473ffffffffffffffffffffffffffffffffffffffff16331461020a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61021460006107b4565b565b60008161022f576102296012600a610985565b92915050565b60008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16806102bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5072696365733a3a67657445544850726963653a204e4f545f464f554e4400006044820152606401610201565b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561030357600080fd5b505afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b91906108b1565b50505060008681526001602052604090205490925061035b915082610a4b565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610201565b6000811161044e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5072696365733a3a616464466565643a205245534552564544000000000000006044820152606401610201565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16156104da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5072696365733a3a616464466565643a20414c52454144595f455849535453006044820152606401610201565b60008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561052257600080fd5b505afa158015610536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055a9190610901565b60ff16905060128111156105ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5072696365733a3a616464466565643a204241445f444543494d414c530000006044820152606401610201565b600082815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055610621816012610a88565b61062c90600a610985565b60008381526001602052604080822092909255905173ffffffffffffffffffffffffffffffffffffffff85169184917f39f7e6a3cfe66d8f71a7951583f7e721ef29d4650eddf11122c8df3aa1c772fd9190a3505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610705576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610201565b73ffffffffffffffffffffffffffffffffffffffff81166107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610201565b6107b1816107b4565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805169ffffffffffffffffffff8116811461084357600080fd5b919050565b60006020828403121561085a57600080fd5b813561086581610ace565b9392505050565b6000806040838503121561087f57600080fd5b823561088a81610ace565b946020939093013593505050565b6000602082840312156108aa57600080fd5b5035919050565b600080600080600060a086880312156108c957600080fd5b6108d286610829565b94506020860151935060408601519250606086015191506108f560808701610829565b90509295509295909350565b60006020828403121561091357600080fd5b815160ff8116811461086557600080fd5b600181815b8085111561097d57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561096357610963610a9f565b8085161561097057918102915b93841c9390800290610929565b509250929050565b6000610865838360008261099b57506001610229565b816109a857506000610229565b81600181146109be57600281146109c8576109e4565b6001915050610229565b60ff8411156109d9576109d9610a9f565b50506001821b610229565b5060208310610133831016604e8410600b8410161715610a07575081810a610229565b610a118383610924565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610a4357610a43610a9f565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a8357610a83610a9f565b500290565b600082821015610a9a57610a9a610a9f565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146107b157600080fdfea2646970667358221220b0bd147c3e6f6c6871281b9982beceb28c5fbda09631c9be03b0b0a22b80fb6d64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addFeed(address,uint256)": {
        "details": "Current feeds can't be modified.",
        "params": {
          "_currency": "The currency that the price feed is for.",
          "_feed": "The price feed being added."
        }
      },
      "getETHPriceFor(uint256)": {
        "params": {
          "_currency": "The currency to get a price for."
        },
        "returns": {
          "_0": "price The price of ETH with 18 decimals."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addFeed(address,uint256)": {
        "notice": " Add a price feed for the price of ETH."
      },
      "feedDecimalAdjuster(uint256)": {
        "notice": "The number to multiply each price feed by to get to the target decimals."
      },
      "feedFor(uint256)": {
        "notice": "The available price feeds that can be used to get the price of ETH."
      },
      "getETHPriceFor(uint256)": {
        "notice": " Gets the current price of ETH for the provided currency."
      },
      "targetDecimals()": {
        "notice": "The target number of decimals the price feed results have."
      }
    },
    "notice": "Manage and normalizes ETH price feeds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Prices.sol:Prices",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7827,
        "contract": "contracts/Prices.sol:Prices",
        "label": "feedDecimalAdjuster",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7834,
        "contract": "contracts/Prices.sol:Prices",
        "label": "feedFor",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_contract(AggregatorV3Interface)45)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(AggregatorV3Interface)45)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)45"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}