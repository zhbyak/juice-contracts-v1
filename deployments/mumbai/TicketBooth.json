{
  "address": "0x67091E60FD91563D82316C44822994E8d6c27419",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract ITerminalDirectory",
          "name": "_terminalDirectory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Issue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "convertedTickets",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferUnstakedTickets",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "Print",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedTickets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferUnstaked",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedBalanceBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferUnstakedTickets",
          "type": "bool"
        }
      ],
      "name": "print",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferUnstaked",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedTotalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "terminalDirectory",
      "outputs": [
        {
          "internalType": "contract ITerminalDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketsOf",
      "outputs": [
        {
          "internalType": "contract ITickets",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe348459dcfe5417c57ef8047a66e7bd174c1380704e4b94cc6bdcfd644813d8",
  "receipt": {
    "to": null,
    "from": "0x95C54D662c31672b2E9C572959AcF93cc883a0A5",
    "contractAddress": "0x67091E60FD91563D82316C44822994E8d6c27419",
    "transactionIndex": 10,
    "gasUsed": "3798221",
    "logsBloom": "0x
    "blockHash": "0xf88cc29cc41959d9a6c23501e91f45c01882137756f2ba91bffc9ec3b42685e9",
    "transactionHash": "0xbe348459dcfe5417c57ef8047a66e7bd174c1380704e4b94cc6bdcfd644813d8",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 25967533,
        "transactionHash": "0xbe348459dcfe5417c57ef8047a66e7bd174c1380704e4b94cc6bdcfd644813d8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000095c54d662c31672b2e9c572959acf93cc883a0a5",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010de13ccb6797fe000000000000000000000000000000000000000000000000275dd5f4014f6f00000000000000000000000000000000000000000000000b1f768079926eeaa198000000000000000000000000000000000000000000000000264ff4b735e7d702000000000000000000000000000000000000000000000b1f778e5acf3a523996",
        "logIndex": 120,
        "blockHash": "0xf88cc29cc41959d9a6c23501e91f45c01882137756f2ba91bffc9ec3b42685e9"
      }
    ],
    "blockNumber": 25967533,
    "cumulativeGasUsed": "6416800",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4209E149F3c9A0F1AFd87AE305968dEa1c7e658e",
    "0x6146588A8Ef03bf8dcBb0519Cc23c7187C7d5026",
    "0x4533f15d4D83a9c8050Cd4BCf4186b4853A3b525"
  ],
  "solcInputHash": "b611a48ccf636fef65065ee937e0c17d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"convertedTickets\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferUnstakedTickets\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"Print\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedBalanceBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferUnstakedTickets\",\"type\":\"bool\"}],\"name\":\"print\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferUnstaked\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTotalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketsOf\",\"outputs\":[{\"internalType\":\"contract ITickets\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Tickets can be either represented internally staked, or as unstaked ERC-20s. This contract manages these two representations and the conversion between the two.The total supply of a project's tickets and the balance of each account are calculated in this contract.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_holder\":\"The ticket holder to get a balance for.\",\"_projectId\":\"The project to get the `_hodler`s balance of.\"},\"returns\":{\"balance\":\"The balance.\"}},\"constructor\":{\"params\":{\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A Projects contract which mints ERC-721's that represent project ownership and transfers.\",\"_terminalDirectory\":\"A directory of a project's current Juicebox terminal to receive payments in.\"}},\"issue(uint256,string,string)\":{\"details\":\" Deploys an owner's Ticket ERC-20 token contract.\",\"params\":{\"_name\":\"The ERC-20's name. \\\" Juicebox ticket\\\" will be appended.\",\"_projectId\":\"The ID of the project being issued tickets.\",\"_symbol\":\"The ERC-20's symbol. \\\"j\\\" will be prepended.\"}},\"lock(address,uint256,uint256)\":{\"details\":\"Only a ticket holder or an operator can lock its tickets.\",\"params\":{\"_amount\":\"The amount of tickets to lock.\",\"_holder\":\"The holder to lock tickets from.\",\"_projectId\":\"The ID of the project whos tickets are being locked.\"}},\"print(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current terminal can print its tickets.\",\"params\":{\"_amount\":\"The amount to print.\",\"_holder\":\"The address receiving the new tickets.\",\"_preferUnstakedTickets\":\"Whether ERC20's should be converted automatically if they have been issued.\",\"_projectId\":\"The project to which the tickets belong.\"}},\"redeem(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current terminal can redeem its tickets.\",\"params\":{\"_amount\":\"The amount of tickets being redeemed.\",\"_holder\":\"The address that owns the tickets being redeemed.\",\"_preferUnstaked\":\"If the preference is to redeem tickets that have been converted to ERC-20s.\",\"_projectId\":\"The ID of the project of the tickets being redeemed.\"}},\"stake(address,uint256,uint256)\":{\"details\":\"Only a ticket holder or an operator can stake its tickets.\",\"params\":{\"_amount\":\"The amount of tickets to stake.\",\"_holder\":\"The owner of the tickets to stake.\",\"_projectId\":\"The ID of the project whos tickets are being staked.\"}},\"totalSupplyOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get the total supply of.\"},\"returns\":{\"supply\":\"The total supply.\"}},\"transfer(address,uint256,uint256,address)\":{\"details\":\"Only a ticket holder or an operator can transfer its tickets.\",\"params\":{\"_amount\":\"The amount of tickets to transfer.\",\"_holder\":\"The holder to transfer tickets from.\",\"_projectId\":\"The ID of the project whos tickets are being transfered.\",\"_recipient\":\"The recipient of the tickets.\"}},\"unlock(address,uint256,uint256)\":{\"details\":\"The address that locked the tickets must be the address that unlocks the tickets.\",\"params\":{\"_amount\":\"The amount of tickets to unlock.\",\"_holder\":\"The holder to unlock tickets from.\",\"_projectId\":\"The ID of the project whos tickets are being unlocked.\"}},\"unstake(address,uint256,uint256)\":{\"details\":\"Only a ticket holder or an operator can unstake its tickets.\",\"params\":{\"_amount\":\"The amount of tickets to unstake.\",\"_holder\":\"The owner of the tickets to unstake.\",\"_projectId\":\"The ID of the project whos tickets are being unstaked.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\" The total balance of tickets a holder has for a specified project, including staked and unstaked tickets.\"},\"issue(uint256,string,string)\":{\"notice\":\" Issues an owner's ERC-20 Tickets that'll be used when unstaking tickets.\"},\"lock(address,uint256,uint256)\":{\"notice\":\" Lock a project's tickets, preventing them from being redeemed and from converting to ERC20s.\"},\"operatorStore()\":{\"notice\":\"A contract storing operator assignments.\"},\"print(address,uint256,uint256,bool)\":{\"notice\":\" Print new tickets.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"redeem(address,uint256,uint256,bool)\":{\"notice\":\" Redeems tickets.\"},\"stake(address,uint256,uint256)\":{\"notice\":\" Stakes ERC20 tickets by burning their supply and creating an internal staked version.\"},\"terminalDirectory()\":{\"notice\":\"The direct deposit terminals.\"},\"totalSupplyOf(uint256)\":{\"notice\":\" The total supply of tickets for each project, including staked and unstaked tickets.\"},\"transfer(address,uint256,uint256,address)\":{\"notice\":\" Allows a ticket holder to transfer its tickets to another account, without unstaking to ERC-20s.\"},\"unlock(address,uint256,uint256)\":{\"notice\":\" Unlock a project's tickets.\"},\"unstake(address,uint256,uint256)\":{\"notice\":\" Unstakes internal tickets by creating and distributing ERC20 tickets.\"}},\"notice\":\" Manage Ticket printing, redemption, and account balances.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TicketBooth.sol\":\"TicketBooth\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x7ce4684ee1fac31ee5671df82b30c10bd2ebf88add2f63524ed00618a8486907\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@paulrberg/contracts/token/erc20/Erc20.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IErc20.sol\\\";\\n\\n/// @notice Emitted when the owner is the zero address.\\nerror Erc20__ApproveOwnerZeroAddress();\\n\\n/// @notice Emitted when the spender is the zero address.\\nerror Erc20__ApproveSpenderZeroAddress();\\n\\n/// @notice Emitted when burning more tokens than are in the account.\\nerror Erc20__BurnUnderflow(uint256 accountBalance, uint256 burnAmount);\\n\\n/// @notice Emitted when the holder is the zero address.\\nerror Erc20__BurnZeroAddress();\\n\\n/// @notice Emitted when the sender did not give the caller a sufficient allowance.\\nerror Erc20__InsufficientAllowance(uint256 allowance, uint256 amount);\\n\\n/// @notice Emitted when the beneficiary is the zero address.\\nerror Erc20__MintZeroAddress();\\n\\n/// @notice Emitted when tranferring more tokens than there are in the account.\\nerror Erc20__TransferUnderflow(uint256 senderBalance, uint256 amount);\\n\\n/// @notice Emitted when the sender is the zero address.\\nerror Erc20__TransferSenderZeroAddress();\\n\\n/// @notice Emitted when the recipient is the zero address.\\nerror Erc20__TransferRecipientZeroAddress();\\n\\n/// @title Erc20\\n/// @author Paul Razvan Berg\\ncontract Erc20 is IErc20 {\\n    /// PUBLIC STORAGE ///\\n\\n    /// @inheritdoc IErc20\\n    string public override name;\\n\\n    /// @inheritdoc IErc20\\n    string public override symbol;\\n\\n    /// @inheritdoc IErc20\\n    uint8 public immutable override decimals;\\n\\n    /// @inheritdoc IErc20\\n    uint256 public override totalSupply;\\n\\n    /// @inheritdoc IErc20\\n    mapping(address => uint256) public override balanceOf;\\n\\n    /// @inheritdoc IErc20\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /// CONSTRUCTOR ///\\n\\n    /// @notice All three of these values are immutable: they can only be set once during construction.\\n    /// @param _name Erc20 name of this token.\\n    /// @param _symbol Erc20 symbol of this token.\\n    /// @param _decimals Erc20 decimal precision of this token.\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @inheritdoc IErc20\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        approveInternal(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IErc20\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual override returns (bool) {\\n        uint256 newAllowance = allowance[msg.sender][spender] - subtractedValue;\\n        approveInternal(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IErc20\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual override returns (bool) {\\n        uint256 newAllowance = allowance[msg.sender][spender] + addedValue;\\n        approveInternal(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IErc20\\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n        transferInternal(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IErc20\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        transferInternal(sender, recipient, amount);\\n\\n        uint256 currentAllowance = allowance[sender][msg.sender];\\n        if (currentAllowance < amount) {\\n            revert Erc20__InsufficientAllowance(currentAllowance, amount);\\n        }\\n        approveInternal(sender, msg.sender, currentAllowance);\\n        return true;\\n    }\\n\\n    /// INTERNAL NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n    ///\\n    /// @dev Emits an {Approval} event.\\n    ///\\n    /// This is internal function is equivalent to `approve`, and can be used to e.g. set automatic\\n    /// allowances for certain subsystems, etc.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `owner` cannot be the zero address.\\n    /// - `spender` cannot be the zero address.\\n    function approveInternal(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        if (owner == address(0)) {\\n            revert Erc20__ApproveOwnerZeroAddress();\\n        }\\n        if (spender == address(0)) {\\n            revert Erc20__ApproveSpenderZeroAddress();\\n        }\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /// @notice Destroys `burnAmount` tokens from `holder`, reducing the token supply.\\n    ///\\n    /// @dev Emits a {Transfer} event.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `holder` must have at least `amount` tokens.\\n    function burnInternal(address holder, uint256 burnAmount) internal {\\n        if (holder == address(0)) {\\n            revert Erc20__BurnZeroAddress();\\n        }\\n\\n        uint256 accountBalance = balanceOf[holder];\\n        if (accountBalance < burnAmount) {\\n            revert Erc20__BurnUnderflow(accountBalance, burnAmount);\\n        }\\n\\n        // Burn the tokens.\\n        unchecked {\\n            balanceOf[holder] = accountBalance - burnAmount;\\n        }\\n\\n        // Reduce the total supply.\\n        totalSupply -= burnAmount;\\n\\n        emit Transfer(holder, address(0), burnAmount);\\n    }\\n\\n    /// @notice Prints new tokens into existence and assigns them to `beneficiary`, increasing the\\n    /// total supply.\\n    ///\\n    /// @dev Emits a {Transfer} event.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - The beneficiary's balance and the total supply cannot overflow.\\n    function mintInternal(address beneficiary, uint256 mintAmount) internal {\\n        if (beneficiary == address(0)) {\\n            revert Erc20__MintZeroAddress();\\n        }\\n\\n        /// Mint the new tokens.\\n        balanceOf[beneficiary] += mintAmount;\\n\\n        /// Increase the total supply.\\n        totalSupply += mintAmount;\\n\\n        emit Transfer(address(0), beneficiary, mintAmount);\\n    }\\n\\n    /// @notice Moves `amount` tokens from `sender` to `recipient`.\\n    ///\\n    /// @dev This is internal function is equivalent to {transfer}, and can be used to e.g. implement\\n    /// automatic token fees, slashing mechanisms, etc.\\n    ///\\n    /// Emits a {Transfer} event.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `sender` cannot be the zero address.\\n    /// - `recipient` cannot be the zero address.\\n    /// - `sender` must have a balance of at least `amount`.\\n    function transferInternal(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        if (sender == address(0)) {\\n            revert Erc20__TransferSenderZeroAddress();\\n        }\\n        if (recipient == address(0)) {\\n            revert Erc20__TransferRecipientZeroAddress();\\n        }\\n\\n        uint256 senderBalance = balanceOf[sender];\\n        if (senderBalance < amount) {\\n            revert Erc20__TransferUnderflow(senderBalance, amount);\\n        }\\n        unchecked {\\n            balanceOf[sender] = senderBalance - amount;\\n        }\\n\\n        balanceOf[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x94263a1477bbc0589c5489621a7be2531a4eea5d1d119891d32d7e29d9f9bbc8\",\"license\":\"WTFPL\"},\"@paulrberg/contracts/token/erc20/Erc20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\n// solhint-disable var-name-mixedcase\\npragma solidity >=0.8.4;\\n\\nimport \\\"./Erc20.sol\\\";\\nimport \\\"./IErc20Permit.sol\\\";\\n\\n/// @notice Emitted when the recovered owner does not match the actual owner.\\nerror Erc20Permit__InvalidSignature(uint8 v, bytes32 r, bytes32 s);\\n\\n/// @notice Emitted when the owner is the zero address.\\nerror Erc20Permit__OwnerZeroAddress();\\n\\n/// @notice Emitted when the permit expired.\\nerror Erc20Permit__PermitExpired(uint256 deadline);\\n\\n/// @notice Emitted when the recovered owner is the zero address.\\nerror Erc20Permit__RecoveredOwnerZeroAddress();\\n\\n/// @notice Emitted when the spender is the zero address.\\nerror Erc20Permit__SpenderZeroAddress();\\n\\n/// @title Erc20Permit\\n/// @author Paul Razvan Berg\\ncontract Erc20Permit is\\n    IErc20Permit, // one dependency\\n    Erc20 // one dependency\\n{\\n    /// PUBLIC STORAGE ///\\n\\n    /// @inheritdoc IErc20Permit\\n    bytes32 public immutable override DOMAIN_SEPARATOR;\\n\\n    /// @inheritdoc IErc20Permit\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        0xfc77c2b9d30fe91687fd39abb7d16fcdfe1472d065740051ab8b13e4bf4a617f;\\n\\n    /// @inheritdoc IErc20Permit\\n    mapping(address => uint256) public override nonces;\\n\\n    /// @inheritdoc IErc20Permit\\n    string public constant override version = \\\"1\\\";\\n\\n    /// CONSTRUCTOR ///\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) Erc20(_name, _symbol, _decimals) {\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @inheritdoc IErc20Permit\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        if (owner == address(0)) {\\n            revert Erc20Permit__OwnerZeroAddress();\\n        }\\n        if (spender == address(0)) {\\n            revert Erc20Permit__SpenderZeroAddress();\\n        }\\n        if (deadline < block.timestamp) {\\n            revert Erc20Permit__PermitExpired(deadline);\\n        }\\n\\n        // It's safe to use the \\\"+\\\" operator here because the nonce cannot realistically overflow, ever.\\n        bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hashStruct));\\n        address recoveredOwner = ecrecover(digest, v, r, s);\\n\\n        if (recoveredOwner == address(0)) {\\n            revert Erc20Permit__RecoveredOwnerZeroAddress();\\n        }\\n        if (recoveredOwner != owner) {\\n            revert Erc20Permit__InvalidSignature(v, r, s);\\n        }\\n\\n        approveInternal(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8c6f24f3a8b85c07603467ff45198b5c8febac7b58a613088019e6a6c5d386de\",\"license\":\"WTFPL\"},\"@paulrberg/contracts/token/erc20/IErc20.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @title IErc20\\n/// @author Paul Razvan Berg\\n/// @notice Implementation for the Erc20 standard.\\n///\\n/// We have followed general OpenZeppelin guidelines: functions revert instead of returning\\n/// `false` on failure. This behavior is nonetheless conventional and does not conflict with\\n/// the with the expectations of Erc20 applications.\\n///\\n/// Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows\\n/// applications to reconstruct the allowance for all accounts just by listening to said\\n/// events. Other implementations of the Erc may not emit these events, as it isn't\\n/// required by the specification.\\n///\\n/// Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been\\n/// added to mitigate the well-known issues around setting allowances.\\n///\\n/// @dev Forked from OpenZeppelin\\n/// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC20/ERC20.sol\\ninterface IErc20 {\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when an approval happens.\\n    /// @param owner The address of the owner of the tokens.\\n    /// @param spender The address of the spender.\\n    /// @param amount The maximum amount that can be spent.\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @notice Emitted when a transfer happens.\\n    /// @param from The account sending the tokens.\\n    /// @param to The account receiving the tokens.\\n    /// @param amount The amount of tokens transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// CONSTANT FUNCTIONS ///\\n\\n    /// @notice Returns the remaining number of tokens that `spender` will be allowed to spend\\n    /// on behalf of `owner` through {transferFrom}. This is zero by default.\\n    ///\\n    /// @dev This value changes when {approve} or {transferFrom} are called.\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Returns the amount of tokens owned by `account`.\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Returns the number of decimals used to get its user representation.\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Returns the name of the token.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the symbol of the token, usually a shorter version of the name.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Returns the amount of tokens in existence.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    ///\\n    /// @dev Emits an {Approval} event.\\n    ///\\n    /// IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may\\n    /// use both the old and the new allowance by unfortunate transaction ordering. One possible solution\\n    /// to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired\\n    /// value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `spender` cannot be the zero address.\\n    ///\\n    /// @return a boolean value indicating whether the operation succeeded.\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Atomically decreases the allowance granted to `spender` by the caller.\\n    ///\\n    /// @dev Emits an {Approval} event indicating the updated allowance.\\n    ///\\n    /// This is an alternative to {approve} that can be used as a mitigation for problems described\\n    /// in {Erc20Interface-approve}.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `spender` cannot be the zero address.\\n    /// - `spender` must have allowance for the caller of at least `subtractedValue`.\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /// @notice Atomically increases the allowance granted to `spender` by the caller.\\n    ///\\n    /// @dev Emits an {Approval} event indicating the updated allowance.\\n    ///\\n    /// This is an alternative to {approve} that can be used as a mitigation for the problems described above.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `spender` cannot be the zero address.\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /// @notice Moves `amount` tokens from the caller's account to `recipient`.\\n    ///\\n    /// @dev Emits a {Transfer} event.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `recipient` cannot be the zero address.\\n    /// - The caller must have a balance of at least `amount`.\\n    ///\\n    /// @return a boolean value indicating whether the operation succeeded.\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount`\\n    /// `is then deducted from the caller's allowance.\\n    ///\\n    /// @dev Emits a {Transfer} event and an {Approval} event indicating the updated allowance. This is\\n    /// not required by the Erc. See the note at the beginning of {Erc20}.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `sender` and `recipient` cannot be the zero address.\\n    /// - `sender` must have a balance of at least `amount`.\\n    /// - The caller must have approed `sender` to spent at least `amount` tokens.\\n    ///\\n    /// @return a boolean value indicating whether the operation succeeded.\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1fd2d0ced180c09f85469a34f4e1e2a8096de3bdb24586a75fe612d4687e19de\",\"license\":\"WTFPL\"},\"@paulrberg/contracts/token/erc20/IErc20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: WTFPL\\n// solhint-disable func-name-mixedcase\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IErc20.sol\\\";\\n\\n/// @title IErc20Permit\\n/// @author Paul Razvan Berg\\n/// @notice Extension of Erc20 that allows token holders to use their tokens without sending any\\n/// transactions by setting the allowance with a signature using the `permit` method, and then spend\\n/// them via `transferFrom`.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612.\\ninterface IErc20Permit is IErc20 {\\n    /// NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over `owner`'s tokens, assuming the latter's\\n    /// signed approval.\\n    ///\\n    /// @dev Emits an {Approval} event.\\n    ///\\n    /// IMPORTANT: The same issues Erc20 `approve` has related to transaction\\n    /// ordering also apply here.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `owner` cannot be the zero address.\\n    /// - `spender` cannot be the zero address.\\n    /// - `deadline` must be a timestamp in the future.\\n    /// - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the Eip712-formatted\\n    /// function arguments.\\n    /// - The signature must use `owner`'s current nonce.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// CONSTANT FUNCTIONS ///\\n\\n    /// @notice The Eip712 domain's keccak256 hash.\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Provides replay protection.\\n    function nonces(address account) external view returns (uint256);\\n\\n    /// @notice keccak256(\\\"Permit(address owner,address spender,uint256 amount,uint256 nonce,uint256 deadline)\\\");\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice Eip712 version of this implementation.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1e9d8294f460143ff761a77c534e9c3097ca1dbde467ef7bccf0c8765645b523\",\"license\":\"WTFPL\"},\"contracts/TicketBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/ITicketBooth.sol\\\";\\nimport \\\"./abstract/Operatable.sol\\\";\\nimport \\\"./abstract/TerminalUtility.sol\\\";\\n\\nimport \\\"./libraries/Operations.sol\\\";\\n\\nimport \\\"./Tickets.sol\\\";\\n\\n/** \\n  @notice \\n  Manage Ticket printing, redemption, and account balances.\\n\\n  @dev\\n  Tickets can be either represented internally staked, or as unstaked ERC-20s.\\n  This contract manages these two representations and the conversion between the two.\\n\\n  @dev\\n  The total supply of a project's tickets and the balance of each account are calculated in this contract.\\n*/\\ncontract TicketBooth is TerminalUtility, Operatable, ITicketBooth {\\n    // --- public immutable stored properties --- //\\n\\n    /// @notice The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n    IProjects public immutable override projects;\\n\\n    // --- public stored properties --- //\\n\\n    // Each project's ERC20 Ticket tokens.\\n    mapping(uint256 => ITickets) public override ticketsOf;\\n\\n    // Each holder's balance of staked Tickets for each project.\\n    mapping(address => mapping(uint256 => uint256))\\n        public\\n        override stakedBalanceOf;\\n\\n    // The total supply of 1155 tickets for each project.\\n    mapping(uint256 => uint256) public override stakedTotalSupplyOf;\\n\\n    // The amount of each holders tickets that are locked.\\n    mapping(address => mapping(uint256 => uint256))\\n        public\\n        override lockedBalanceOf;\\n\\n    // The amount of each holders tickets that are locked by each address.\\n    mapping(address => mapping(address => mapping(uint256 => uint256)))\\n        public\\n        override lockedBalanceBy;\\n\\n    // --- external views --- //\\n\\n    /** \\n      @notice \\n      The total supply of tickets for each project, including staked and unstaked tickets.\\n\\n      @param _projectId The ID of the project to get the total supply of.\\n\\n      @return supply The total supply.\\n    */\\n    function totalSupplyOf(uint256 _projectId)\\n        external\\n        view\\n        override\\n        returns (uint256 supply)\\n    {\\n        supply = stakedTotalSupplyOf[_projectId];\\n        ITickets _tickets = ticketsOf[_projectId];\\n        if (_tickets != ITickets(address(0)))\\n            supply = supply + _tickets.totalSupply();\\n    }\\n\\n    /** \\n      @notice \\n      The total balance of tickets a holder has for a specified project, including staked and unstaked tickets.\\n\\n      @param _holder The ticket holder to get a balance for.\\n      @param _projectId The project to get the `_hodler`s balance of.\\n\\n      @return balance The balance.\\n    */\\n    function balanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        balance = stakedBalanceOf[_holder][_projectId];\\n        ITickets _ticket = ticketsOf[_projectId];\\n        if (_ticket != ITickets(address(0)))\\n            balance = balance + _ticket.balanceOf(_holder);\\n    }\\n\\n    // --- external transactions --- //\\n\\n    /** \\n      @param _projects A Projects contract which mints ERC-721's that represent project ownership and transfers.\\n      @param _operatorStore A contract storing operator assignments.\\n      @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n    constructor(\\n        IProjects _projects,\\n        IOperatorStore _operatorStore,\\n        ITerminalDirectory _terminalDirectory\\n    ) Operatable(_operatorStore) TerminalUtility(_terminalDirectory) {\\n        projects = _projects;\\n    }\\n\\n    /**\\n        @notice \\n        Issues an owner's ERC-20 Tickets that'll be used when unstaking tickets.\\n\\n        @dev \\n        Deploys an owner's Ticket ERC-20 token contract.\\n\\n        @param _projectId The ID of the project being issued tickets.\\n        @param _name The ERC-20's name. \\\" Juicebox ticket\\\" will be appended.\\n        @param _symbol The ERC-20's symbol. \\\"j\\\" will be prepended.\\n    */\\n    function issue(\\n        uint256 _projectId,\\n        string calldata _name,\\n        string calldata _symbol\\n    )\\n        external\\n        override\\n        requirePermission(\\n            projects.ownerOf(_projectId),\\n            _projectId,\\n            Operations.Issue\\n        )\\n    {\\n        // There must be a name.\\n        require((bytes(_name).length > 0), \\\"TicketBooth::issue: EMPTY_NAME\\\");\\n\\n        // There must be a symbol.\\n        require(\\n            (bytes(_symbol).length > 0),\\n            \\\"TicketBooth::issue: EMPTY_SYMBOL\\\"\\n        );\\n\\n        // Only one ERC20 ticket can be issued.\\n        require(\\n            ticketsOf[_projectId] == ITickets(address(0)),\\n            \\\"TicketBooth::issue: ALREADY_ISSUED\\\"\\n        );\\n\\n        // Create the contract in this TerminalV1 contract in order to have mint and burn privileges.\\n        // Prepend the strings with standards.\\n        ticketsOf[_projectId] = new Tickets(_name, _symbol);\\n\\n        emit Issue(_projectId, _name, _symbol, msg.sender);\\n    }\\n\\n    /** \\n      @notice \\n      Print new tickets.\\n\\n      @dev\\n      Only a project's current terminal can print its tickets.\\n\\n      @param _holder The address receiving the new tickets.\\n      @param _projectId The project to which the tickets belong.\\n      @param _amount The amount to print.\\n      @param _preferUnstakedTickets Whether ERC20's should be converted automatically if they have been issued.\\n    */\\n    function print(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstakedTickets\\n    ) external override onlyTerminal(_projectId) {\\n        // An amount must be specified.\\n        require(_amount > 0, \\\"TicketBooth::print: NO_OP\\\");\\n\\n        // Get a reference to the project's ERC20 tickets.\\n        ITickets _tickets = ticketsOf[_projectId];\\n\\n        // If there exists ERC-20 tickets and the caller prefers these unstaked tickets.\\n        bool _shouldUnstakeTickets = _preferUnstakedTickets &&\\n            _tickets != ITickets(address(0));\\n\\n        if (_shouldUnstakeTickets) {\\n            // Print the equivalent amount of ERC20s.\\n            _tickets.print(_holder, _amount);\\n        } else {\\n            // Add to the staked balance and total supply.\\n            stakedBalanceOf[_holder][_projectId] =\\n                stakedBalanceOf[_holder][_projectId] +\\n                _amount;\\n            stakedTotalSupplyOf[_projectId] =\\n                stakedTotalSupplyOf[_projectId] +\\n                _amount;\\n        }\\n\\n        emit Print(\\n            _holder,\\n            _projectId,\\n            _amount,\\n            _shouldUnstakeTickets,\\n            _preferUnstakedTickets,\\n            msg.sender\\n        );\\n    }\\n\\n    /** \\n      @notice \\n      Redeems tickets.\\n\\n      @dev\\n      Only a project's current terminal can redeem its tickets.\\n\\n      @param _holder The address that owns the tickets being redeemed.\\n      @param _projectId The ID of the project of the tickets being redeemed.\\n      @param _amount The amount of tickets being redeemed.\\n      @param _preferUnstaked If the preference is to redeem tickets that have been converted to ERC-20s.\\n    */\\n    function redeem(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstaked\\n    ) external override onlyTerminal(_projectId) {\\n        // Get a reference to the project's ERC20 tickets.\\n        ITickets _tickets = ticketsOf[_projectId];\\n\\n        // Get a reference to the staked amount.\\n        uint256 _unlockedStakedBalance = stakedBalanceOf[_holder][_projectId] -\\n            lockedBalanceOf[_holder][_projectId];\\n\\n        // Get a reference to the number of tickets there are.\\n        uint256 _unstakedBalanceOf = _tickets == ITickets(address(0))\\n            ? 0\\n            : _tickets.balanceOf(_holder);\\n\\n        // There must be enough tickets.\\n        // Prevent potential overflow by not relying on addition.\\n        require(\\n            (_amount < _unstakedBalanceOf &&\\n                _amount < _unlockedStakedBalance) ||\\n                (_amount >= _unstakedBalanceOf &&\\n                    _unlockedStakedBalance >= _amount - _unstakedBalanceOf) ||\\n                (_amount >= _unlockedStakedBalance &&\\n                    _unstakedBalanceOf >= _amount - _unlockedStakedBalance),\\n            \\\"TicketBooth::redeem: INSUFFICIENT_FUNDS\\\"\\n        );\\n\\n        // The amount of tickets to redeem.\\n        uint256 _unstakedTicketsToRedeem;\\n\\n        // If there's no balance, redeem no tickets\\n        if (_unstakedBalanceOf == 0) {\\n            _unstakedTicketsToRedeem = 0;\\n            // If prefer converted, redeem tickets before redeeming staked tickets.\\n        } else if (_preferUnstaked) {\\n            _unstakedTicketsToRedeem = _unstakedBalanceOf >= _amount\\n                ? _amount\\n                : _unstakedBalanceOf;\\n            // Otherwise, redeem staked tickets before unstaked tickets.\\n        } else {\\n            _unstakedTicketsToRedeem = _unlockedStakedBalance >= _amount\\n                ? 0\\n                : _amount - _unlockedStakedBalance;\\n        }\\n\\n        // The amount of staked tickets to redeem.\\n        uint256 _stakedTicketsToRedeem = _amount - _unstakedTicketsToRedeem;\\n\\n        // Redeem the tickets.\\n        if (_unstakedTicketsToRedeem > 0)\\n            _tickets.redeem(_holder, _unstakedTicketsToRedeem);\\n        if (_stakedTicketsToRedeem > 0) {\\n            // Reduce the holders balance and the total supply.\\n            stakedBalanceOf[_holder][_projectId] =\\n                stakedBalanceOf[_holder][_projectId] -\\n                _stakedTicketsToRedeem;\\n            stakedTotalSupplyOf[_projectId] =\\n                stakedTotalSupplyOf[_projectId] -\\n                _stakedTicketsToRedeem;\\n        }\\n\\n        emit Redeem(\\n            _holder,\\n            _projectId,\\n            _amount,\\n            _unlockedStakedBalance,\\n            _preferUnstaked,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n      @notice \\n      Stakes ERC20 tickets by burning their supply and creating an internal staked version.\\n\\n      @dev\\n      Only a ticket holder or an operator can stake its tickets.\\n\\n      @param _holder The owner of the tickets to stake.\\n      @param _projectId The ID of the project whos tickets are being staked.\\n      @param _amount The amount of tickets to stake.\\n     */\\n    function stake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        requirePermissionAllowingWildcardDomain(\\n            _holder,\\n            _projectId,\\n            Operations.Stake\\n        )\\n    {\\n        // Get a reference to the project's ERC20 tickets.\\n        ITickets _tickets = ticketsOf[_projectId];\\n\\n        // Tickets must have been issued.\\n        require(\\n            _tickets != ITickets(address(0)),\\n            \\\"TicketBooth::stake: NOT_FOUND\\\"\\n        );\\n\\n        // Get a reference to the holder's current balance.\\n        uint256 _unstakedBalanceOf = _tickets.balanceOf(_holder);\\n\\n        // There must be enough balance to stake.\\n        require(\\n            _unstakedBalanceOf >= _amount,\\n            \\\"TicketBooth::stake: INSUFFICIENT_FUNDS\\\"\\n        );\\n\\n        // Redeem the equivalent amount of ERC20s.\\n        _tickets.redeem(_holder, _amount);\\n\\n        // Add the staked amount from the holder's balance.\\n        stakedBalanceOf[_holder][_projectId] =\\n            stakedBalanceOf[_holder][_projectId] +\\n            _amount;\\n\\n        // Add the staked amount from the project's total supply.\\n        stakedTotalSupplyOf[_projectId] =\\n            stakedTotalSupplyOf[_projectId] +\\n            _amount;\\n\\n        emit Stake(_holder, _projectId, _amount, msg.sender);\\n    }\\n\\n    /**\\n      @notice \\n      Unstakes internal tickets by creating and distributing ERC20 tickets.\\n\\n      @dev\\n      Only a ticket holder or an operator can unstake its tickets.\\n\\n      @param _holder The owner of the tickets to unstake.\\n      @param _projectId The ID of the project whos tickets are being unstaked.\\n      @param _amount The amount of tickets to unstake.\\n     */\\n    function unstake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        requirePermissionAllowingWildcardDomain(\\n            _holder,\\n            _projectId,\\n            Operations.Unstake\\n        )\\n    {\\n        // Get a reference to the project's ERC20 tickets.\\n        ITickets _tickets = ticketsOf[_projectId];\\n\\n        // Tickets must have been issued.\\n        require(\\n            _tickets != ITickets(address(0)),\\n            \\\"TicketBooth::unstake: NOT_FOUND\\\"\\n        );\\n\\n        // Get a reference to the amount of unstaked tickets.\\n        uint256 _unlockedStakedTickets = stakedBalanceOf[_holder][_projectId] -\\n            lockedBalanceOf[_holder][_projectId];\\n\\n        // There must be enough unlocked staked tickets to unstake.\\n        require(\\n            _unlockedStakedTickets >= _amount,\\n            \\\"TicketBooth::unstake: INSUFFICIENT_FUNDS\\\"\\n        );\\n\\n        // Subtract the unstaked amount from the holder's balance.\\n        stakedBalanceOf[_holder][_projectId] =\\n            stakedBalanceOf[_holder][_projectId] -\\n            _amount;\\n\\n        // Subtract the unstaked amount from the project's total supply.\\n        stakedTotalSupplyOf[_projectId] =\\n            stakedTotalSupplyOf[_projectId] -\\n            _amount;\\n\\n        // Print the equivalent amount of ERC20s.\\n        _tickets.print(_holder, _amount);\\n\\n        emit Unstake(_holder, _projectId, _amount, msg.sender);\\n    }\\n\\n    /** \\n      @notice \\n      Lock a project's tickets, preventing them from being redeemed and from converting to ERC20s.\\n\\n      @dev\\n      Only a ticket holder or an operator can lock its tickets.\\n\\n      @param _holder The holder to lock tickets from.\\n      @param _projectId The ID of the project whos tickets are being locked.\\n      @param _amount The amount of tickets to lock.\\n    */\\n    function lock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        requirePermissionAllowingWildcardDomain(\\n            _holder,\\n            _projectId,\\n            Operations.Lock\\n        )\\n    {\\n        // Amount must be greater than 0.\\n        require(_amount > 0, \\\"TicketBooth::lock: NO_OP\\\");\\n\\n        // The holder must have enough tickets to lock.\\n        require(\\n            stakedBalanceOf[_holder][_projectId] -\\n                lockedBalanceOf[_holder][_projectId] >=\\n                _amount,\\n            \\\"TicketBooth::lock: INSUFFICIENT_FUNDS\\\"\\n        );\\n\\n        // Update the lock.\\n        lockedBalanceOf[_holder][_projectId] =\\n            lockedBalanceOf[_holder][_projectId] +\\n            _amount;\\n        lockedBalanceBy[msg.sender][_holder][_projectId] =\\n            lockedBalanceBy[msg.sender][_holder][_projectId] +\\n            _amount;\\n\\n        emit Lock(_holder, _projectId, _amount, msg.sender);\\n    }\\n\\n    /** \\n      @notice \\n      Unlock a project's tickets.\\n\\n      @dev\\n      The address that locked the tickets must be the address that unlocks the tickets.\\n\\n      @param _holder The holder to unlock tickets from.\\n      @param _projectId The ID of the project whos tickets are being unlocked.\\n      @param _amount The amount of tickets to unlock.\\n    */\\n    function unlock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external override {\\n        // Amount must be greater than 0.\\n        require(_amount > 0, \\\"TicketBooth::unlock: NO_OP\\\");\\n\\n        // There must be enough locked tickets to unlock.\\n        require(\\n            lockedBalanceBy[msg.sender][_holder][_projectId] >= _amount,\\n            \\\"TicketBooth::unlock: INSUFFICIENT_FUNDS\\\"\\n        );\\n\\n        // Update the lock.\\n        lockedBalanceOf[_holder][_projectId] =\\n            lockedBalanceOf[_holder][_projectId] -\\n            _amount;\\n        lockedBalanceBy[msg.sender][_holder][_projectId] =\\n            lockedBalanceBy[msg.sender][_holder][_projectId] -\\n            _amount;\\n\\n        emit Unlock(_holder, _projectId, _amount, msg.sender);\\n    }\\n\\n    /** \\n      @notice \\n      Allows a ticket holder to transfer its tickets to another account, without unstaking to ERC-20s.\\n\\n      @dev\\n      Only a ticket holder or an operator can transfer its tickets.\\n\\n      @param _holder The holder to transfer tickets from.\\n      @param _projectId The ID of the project whos tickets are being transfered.\\n      @param _amount The amount of tickets to transfer.\\n      @param _recipient The recipient of the tickets.\\n    */\\n    function transfer(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        address _recipient\\n    )\\n        external\\n        override\\n        requirePermissionAllowingWildcardDomain(\\n            _holder,\\n            _projectId,\\n            Operations.Transfer\\n        )\\n    {\\n        // Can't transfer to the zero address.\\n        require(\\n            _recipient != address(0),\\n            \\\"TicketBooth::transfer: ZERO_ADDRESS\\\"\\n        );\\n\\n        // An address can't transfer to itself.\\n        require(_holder != _recipient, \\\"TicketBooth::transfer: IDENTITY\\\");\\n\\n        // There must be an amount to transfer.\\n        require(_amount > 0, \\\"TicketBooth::transfer: NO_OP\\\");\\n\\n        // Get a reference to the amount of unlocked staked tickets.\\n        uint256 _unlockedStakedTickets = stakedBalanceOf[_holder][_projectId] -\\n            lockedBalanceOf[_holder][_projectId];\\n\\n        // There must be enough unlocked staked tickets to transfer.\\n        require(\\n            _amount <= _unlockedStakedTickets,\\n            \\\"TicketBooth::transfer: INSUFFICIENT_FUNDS\\\"\\n        );\\n\\n        // Subtract from the holder.\\n        stakedBalanceOf[_holder][_projectId] =\\n            stakedBalanceOf[_holder][_projectId] -\\n            _amount;\\n\\n        // Add the tickets to the recipient.\\n        stakedBalanceOf[_recipient][_projectId] =\\n            stakedBalanceOf[_recipient][_projectId] +\\n            _amount;\\n\\n        emit Transfer(_holder, _projectId, _recipient, _amount, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x307ac45aaaa17c6b6856a1103d873c519ac6043198890db43f3c28a621854612\",\"license\":\"MIT\"},\"contracts/Tickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@paulrberg/contracts/token/erc20/Erc20Permit.sol\\\";\\n\\nimport \\\"./interfaces/ITickets.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Tickets is ERC20, ERC20Permit, Ownable, ITickets {\\n    constructor(string memory _name, string memory _symbol)\\n        ERC20(_name, _symbol)\\n        ERC20Permit(_name)\\n    {}\\n\\n    function print(address _account, uint256 _amount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        return _mint(_account, _amount);\\n    }\\n\\n    function redeem(address _account, uint256 _amount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        return _burn(_account, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe8a08e4e4c16843623cb9331790804906708daf8986b2d43777bb160e2d2aadc\",\"license\":\"MIT\"},\"contracts/abstract/Operatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./../interfaces/IOperatable.sol\\\";\\n\\nabstract contract Operatable is IOperatable {\\n    modifier requirePermission(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _index\\n    ) {\\n        require(\\n            msg.sender == _account ||\\n                operatorStore.hasPermission(\\n                    msg.sender,\\n                    _account,\\n                    _domain,\\n                    _index\\n                ),\\n            \\\"Operatable: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requirePermissionAllowingWildcardDomain(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _index\\n    ) {\\n        require(\\n            msg.sender == _account ||\\n                operatorStore.hasPermission(\\n                    msg.sender,\\n                    _account,\\n                    _domain,\\n                    _index\\n                ) ||\\n                operatorStore.hasPermission(msg.sender, _account, 0, _index),\\n            \\\"Operatable: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requirePermissionAcceptingAlternateAddress(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _index,\\n        address _alternate\\n    ) {\\n        require(\\n            msg.sender == _account ||\\n                operatorStore.hasPermission(\\n                    msg.sender,\\n                    _account,\\n                    _domain,\\n                    _index\\n                ) ||\\n                msg.sender == _alternate,\\n            \\\"Operatable: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice A contract storing operator assignments.\\n    IOperatorStore public immutable override operatorStore;\\n\\n    /** \\n      @param _operatorStore A contract storing operator assignments.\\n    */\\n    constructor(IOperatorStore _operatorStore) {\\n        operatorStore = _operatorStore;\\n    }\\n}\\n\",\"keccak256\":\"0x5401b4930a799c898c61bbf3c27331f8f097fa326124ba95d2e119dc49bdd44e\",\"license\":\"MIT\"},\"contracts/abstract/TerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./../interfaces/ITerminalUtility.sol\\\";\\n\\nabstract contract TerminalUtility is ITerminalUtility {\\n    modifier onlyTerminal(uint256 _projectId) {\\n        require(\\n            address(terminalDirectory.terminalOf(_projectId)) == msg.sender,\\n            \\\"TerminalUtility: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice The direct deposit terminals.\\n    ITerminalDirectory public immutable override terminalDirectory;\\n\\n    /** \\n      @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n    constructor(ITerminalDirectory _terminalDirectory) {\\n        terminalDirectory = _terminalDirectory;\\n    }\\n}\\n\",\"keccak256\":\"0x49513e4e47886230f223b0e8623e4e5390eaab9bb032da3b7664bac1adb00809\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectPaymentAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IDirectPaymentAddress {\\n    event Forward(\\n        address indexed payer,\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256 value,\\n        string memo,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function terminalDirectory() external returns (ITerminalDirectory);\\n\\n    function projectId() external returns (uint256);\\n\\n    function memo() external returns (string memory);\\n}\\n\",\"keccak256\":\"0x6e1770ac38a8fd90c51745f98a06b0461963ffae3116dab3761fda175e10a3da\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IOperatorStore.sol\\\";\\n\\ninterface IOperatable {\\n    function operatorStore() external view returns (IOperatorStore);\\n}\\n\",\"keccak256\":\"0xcb7dca7db6fece5017a55c52d2b41a3659c0f7640261f56f36157ad9a583381d\",\"license\":\"MIT\"},\"contracts/interfaces/IOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IOperatorStore {\\n    event SetOperator(\\n        address indexed operator,\\n        address indexed account,\\n        uint256 indexed domain,\\n        uint256[] permissionIndexes,\\n        uint256 packed\\n    );\\n\\n    function permissionsOf(\\n        address _operator,\\n        address _account,\\n        uint256 _domain\\n    ) external view returns (uint256);\\n\\n    function hasPermission(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256 _permissionIndex\\n    ) external view returns (bool);\\n\\n    function hasPermissions(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external view returns (bool);\\n\\n    function setOperator(\\n        address _operator,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external;\\n\\n    function setOperators(\\n        address[] calldata _operators,\\n        uint256[] calldata _domains,\\n        uint256[][] calldata _permissionIndexes\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe89167e611fd4be161eab80dfdd24da66bdb37a80aad583bf05a0c934117b8f6\",\"license\":\"MIT\"},\"contracts/interfaces/IProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 indexed handle,\\n        string uri,\\n        ITerminal terminal,\\n        address caller\\n    );\\n\\n    event SetHandle(\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n    event TransferHandle(\\n        uint256 indexed projectId,\\n        address indexed to,\\n        bytes32 indexed handle,\\n        bytes32 newHandle,\\n        address caller\\n    );\\n\\n    event ClaimHandle(\\n        address indexed account,\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event ChallengeHandle(\\n        bytes32 indexed handle,\\n        uint256 challengeExpiry,\\n        address caller\\n    );\\n\\n    event RenewHandle(\\n        bytes32 indexed handle,\\n        uint256 indexed projectId,\\n        address caller\\n    );\\n\\n    function count() external view returns (uint256);\\n\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function transferAddressFor(bytes32 _handle)\\n        external\\n        returns (address receiver);\\n\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        string calldata _uri,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\n\\n    function transferHandle(\\n        uint256 _projectId,\\n        address _to,\\n        bytes32 _newHandle\\n    ) external returns (bytes32 _handle);\\n\\n    function claimHandle(\\n        bytes32 _handle,\\n        address _for,\\n        uint256 _projectId\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8737307dc78cee4afa738a6771dabfaf3378f3678f67490f3ce6ca3ac37ac654\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './ITerminalDirectory.sol';\\n\\ninterface ITerminal {\\n  function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n  function migrationIsAllowed(ITerminal _terminal) external view returns (bool);\\n\\n  function pay(\\n    uint256 _projectId,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferUnstakedTickets\\n  ) external payable returns (uint256 fundingCycleId);\\n\\n  function addToBalance(uint256 _projectId) external payable;\\n\\n  function allowMigration(ITerminal _contract) external;\\n\\n  function migrate(uint256 _projectId, ITerminal _to) external;\\n}\\n\",\"keccak256\":\"0x177800cf28a70e7a13ecc57afb69cf93aaebc28d8b1a1ced8809c5f70dface77\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event DeployAddress(\\n        uint256 indexed projectId,\\n        string memo,\\n        address indexed caller\\n    );\\n\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    event SetPayerPreferences(\\n        address indexed account,\\n        address beneficiary,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function beneficiaryOf(address _account) external returns (address);\\n\\n    function unstakedTicketsPreferenceOf(address _account)\\n        external\\n        returns (bool);\\n\\n    function addressesOf(uint256 _projectId)\\n        external\\n        view\\n        returns (IDirectPaymentAddress[] memory);\\n\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n\\n    function setPayerPreferences(\\n        address _beneficiary,\\n        bool _preferUnstakedTickets\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd30bb42ee6a7a8c35b63fd5445b0b737e39925deb12b9f3f307cb47ca0933a4b\",\"license\":\"MIT\"},\"contracts/interfaces/ITerminalUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminalUtility {\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n}\\n\",\"keccak256\":\"0x67b4498630f0e4fcc0e018688a3ed74edee656f0b24991bfc2dc812f3404d97c\",\"license\":\"MIT\"},\"contracts/interfaces/ITicketBooth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\nimport \\\"./ITickets.sol\\\";\\n\\ninterface ITicketBooth {\\n    event Issue(\\n        uint256 indexed projectId,\\n        string name,\\n        string symbol,\\n        address caller\\n    );\\n    event Print(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        bool convertedTickets,\\n        bool preferUnstakedTickets,\\n        address controller\\n    );\\n\\n    event Redeem(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        uint256 stakedTickets,\\n        bool preferUnstaked,\\n        address controller\\n    );\\n\\n    event Stake(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Unstake(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Lock(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Unlock(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Transfer(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        address indexed recipient,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    function ticketsOf(uint256 _projectId) external view returns (ITickets);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function lockedBalanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lockedBalanceBy(\\n        address _operator,\\n        address _holder,\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function stakedBalanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stakedTotalSupplyOf(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n    function balanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256 _result);\\n\\n    function issue(\\n        uint256 _projectId,\\n        string calldata _name,\\n        string calldata _symbol\\n    ) external;\\n\\n    function print(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstakedTickets\\n    ) external;\\n\\n    function redeem(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstaked\\n    ) external;\\n\\n    function stake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function lock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unlock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function transfer(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        address _recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8593f40267c3c98e54d2b17e4306e1c951a59201d4df3214a1d6e8ef49dd5d9b\",\"license\":\"MIT\"},\"contracts/interfaces/ITickets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITickets is IERC20 {\\n    function print(address _account, uint256 _amount) external;\\n\\n    function redeem(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x694dd5b030b138ac3cc2957fd096f79267babef76d517667091d45fa33edb222\",\"license\":\"MIT\"},\"contracts/libraries/Operations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary Operations {\\n  uint256 public constant Configure = 1;\\n  uint256 public constant PrintPreminedTickets = 2;\\n  uint256 public constant Redeem = 3;\\n  uint256 public constant Migrate = 4;\\n  uint256 public constant SetHandle = 5;\\n  uint256 public constant SetUri = 6;\\n  uint256 public constant ClaimHandle = 7;\\n  uint256 public constant RenewHandle = 8;\\n  uint256 public constant Issue = 9;\\n  uint256 public constant Stake = 10;\\n  uint256 public constant Unstake = 11;\\n  uint256 public constant Transfer = 12;\\n  uint256 public constant Lock = 13;\\n  uint256 public constant SetPayoutMods = 14;\\n  uint256 public constant SetTicketMods = 15;\\n  uint256 public constant SetTerminal = 16;\\n  uint256 public constant PrintTickets = 17;\\n}\\n\",\"keccak256\":\"0xa1a020b014d0cf765fb61dc46f9ee91384fa8c68d93b131a90b9182baab6b1d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620045753803806200457583398101604081905262000034916200005d565b6001600160601b0319606091821b811660805291811b821660a0529190911b1660c052620000ca565b6000806000606084860312156200007357600080fd5b83516200008081620000b1565b60208501519093506200009381620000b1565b6040850151909250620000a681620000b1565b809150509250925092565b6001600160a01b0381168114620000c757600080fd5b50565b60805160601c60a05160601c60c05160601c61441e620001576000396000818161028801526113230152600081816102f501528181610504015281816105d5015281816109d101528181610aa20152818161140b015281816117eb015281816118bc0152818161212b01526121fc01526000818161024901528181610e850152611e0c015261441e6000f3fe60806040523480156200001157600080fd5b50600436106200014e5760003560e01c80638b79543c11620000c0578063b5674c68116200008b578063b6f7fdb9116200006e578063b6f7fdb9146200035c578063e0826c891462000390578063e2ab691d14620003a757600080fd5b8063b5674c681462000317578063b656463b146200032e57600080fd5b80638b79543c14620002825780638ef4c80714620002aa578063a2bc66be14620002d8578063ad007d6314620002ef57600080fd5b80635030724e116200011e5780636806ec5911620001015780636806ec59146200022c5780636abcf8e3146200024357806375b0d9cd146200026b57600080fd5b80635030724e14620001f257806365e0d731146200021557600080fd5b8062fdd58e14620001535780630c51b88f146200017d57806333681fb11462000196578063465909fc14620001ad575b600080fd5b6200016a6200016436600462002590565b620003be565b6040519081526020015b60405180910390f35b620001946200018e366004620025bf565b620004a1565b005b62000194620001a7366004620025f7565b6200096e565b620001d9620001be366004620026aa565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200162000174565b6200016a62000203366004620026aa565b60026020526000908152604090205481565b620001946200022636600462002646565b62000e4a565b620001946200023d366004620026de565b620012f4565b620001d97f000000000000000000000000000000000000000000000000000000000000000081565b6200016a6200027c366004620026aa565b620016d4565b620001d97f000000000000000000000000000000000000000000000000000000000000000081565b6200016a620002bb36600462002590565b600360209081526000928352604080842090915290825290205481565b62000194620002e9366004620025bf565b62001788565b620001d97f000000000000000000000000000000000000000000000000000000000000000081565b6200019462000328366004620025bf565b62001bea565b6200016a6200033f36600462002590565b600160209081526000928352604080842090915290825290205481565b6200016a6200036d3660046200254a565b600460209081526000938452604080852082529284528284209052825290205481565b62000194620003a136600462002646565b62001dd1565b62000194620003b8366004620025bf565b620020c8565b6001600160a01b038083166000908152600160209081526040808320858452825280832054918390529091205490911680156200049a576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528216906370a082319060240160206040518083038186803b1580156200045057600080fd5b505afa15801562000465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200048b9190620026c4565b62000497908362002825565b91505b5092915050565b8282600a336001600160a01b03841614806200058257506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200054757600080fd5b505afa1580156200055c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200058291906200268a565b806200065357506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200061857600080fd5b505afa1580156200062d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200065391906200268a565b620006a55760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064015b60405180910390fd5b6000858152602081905260409020546001600160a01b0316806200070c5760405162461bcd60e51b815260206004820152601d60248201527f5469636b6574426f6f74683a3a7374616b653a204e4f545f464f554e4400000060448201526064016200069c565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152600091908316906370a082319060240160206040518083038186803b1580156200076b57600080fd5b505afa15801562000780573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007a69190620026c4565b905085811015620008205760405162461bcd60e51b815260206004820152602660248201527f5469636b6574426f6f74683a3a7374616b653a20494e53554646494349454e5460448201527f5f46554e4453000000000000000000000000000000000000000000000000000060648201526084016200069c565b6040517f1e9a69500000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015260248201889052831690631e9a695090604401600060405180830381600087803b1580156200088457600080fd5b505af115801562000899573d6000803e3d6000fd5b5050506001600160a01b03891660009081526001602090815260408083208b8452909152902054620008ce9150879062002825565b6001600160a01b03891660009081526001602090815260408083208b84528252808320939093556002905220546200090890879062002825565b600088815260026020908152604091829020929092558051888152339281019290925288916001600160a01b038b16917feb43904edee62537f8f003e791630611e9d7d8b7e0f0c038639ebe7c970dd63091015b60405180910390a35050505050505050565b8383600c336001600160a01b038416148062000a4f57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000a1457600080fd5b505afa15801562000a29573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a4f91906200268a565b8062000b2057506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801562000ae557600080fd5b505afa15801562000afa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b2091906200268a565b62000b6e5760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b6001600160a01b03841662000bec5760405162461bcd60e51b815260206004820152602360248201527f5469636b6574426f6f74683a3a7472616e736665723a205a45524f5f4144445260448201527f455353000000000000000000000000000000000000000000000000000000000060648201526084016200069c565b836001600160a01b0316876001600160a01b0316141562000c505760405162461bcd60e51b815260206004820152601f60248201527f5469636b6574426f6f74683a3a7472616e736665723a204944454e544954590060448201526064016200069c565b6000851162000ca25760405162461bcd60e51b815260206004820152601c60248201527f5469636b6574426f6f74683a3a7472616e736665723a204e4f5f4f500000000060448201526064016200069c565b6001600160a01b03871660008181526003602090815260408083208a8452825280832054938352600182528083208a8452909152812054909162000ce69162002840565b90508086111562000d605760405162461bcd60e51b815260206004820152602960248201527f5469636b6574426f6f74683a3a7472616e736665723a20494e5355464649434960448201527f454e545f46554e4453000000000000000000000000000000000000000000000060648201526084016200069c565b6001600160a01b03881660009081526001602090815260408083208a845290915290205462000d9190879062002840565b6001600160a01b03808a1660009081526001602081815260408084208d8552825280842095909555928916825282528281208a8252909152205462000dd890879062002825565b6001600160a01b0386811660008181526001602090815260408083208d84528252918290209490945580518a8152339481019490945290928a928c16917fae47e55abe3902569528abe4272b889079230a248aec0659a2939a90354982c6910160405180910390a45050505050505050565b6040517f4fe0eced00000000000000000000000000000000000000000000000000000000815260048101849052839033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634fe0eced9060240160206040518083038186803b15801562000ec857600080fd5b505afa15801562000edd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f03919062002523565b6001600160a01b03161462000f5b5760405162461bcd60e51b815260206004820152601d60248201527f5465726d696e616c5574696c6974793a20554e415554484f52495a454400000060448201526064016200069c565b600084815260208181526040808320546001600160a01b03898116808652600385528386208a8752855283862054908652600185528386208a8752909452918420549116929162000fac9162002840565b905060006001600160a01b038316156200105c576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528416906370a082319060240160206040518083038186803b1580156200101b57600080fd5b505afa15801562001030573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010569190620026c4565b6200105f565b60005b905080861080156200107057508186105b806200109357508086101580156200109357506200108f818762002840565b8210155b80620010b65750818610158015620010b65750620010b2828762002840565b8110155b6200112a5760405162461bcd60e51b815260206004820152602760248201527f5469636b6574426f6f74683a3a72656465656d3a20494e53554646494349454e60448201527f545f46554e44530000000000000000000000000000000000000000000000000060648201526084016200069c565b6000816200113b575060006200117d565b85156200115c578682101562001152578162001154565b865b90506200117d565b86831015620011775762001171838862002840565b6200117a565b60005b90505b60006200118b828962002840565b9050811562001212576040517f1e9a69500000000000000000000000000000000000000000000000000000000081526001600160a01b038b8116600483015260248201849052861690631e9a695090604401600060405180830381600087803b158015620011f857600080fd5b505af11580156200120d573d6000803e3d6000fd5b505050505b801562001294576001600160a01b038a1660009081526001602090815260408083208c84529091529020546200124a90829062002840565b6001600160a01b038b1660009081526001602090815260408083208d84528252808320939093556002905220546200128490829062002840565b60008a8152600260205260409020555b60408051898152602081018690528815158183015233606082015290518a916001600160a01b038d16917f8c2b9ccc192ca181c0f26a420bbc623e6222ce29c08f6e81b68df4f076f123439181900360800190a350505050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b1580156200136e57600080fd5b505afa15801562001383573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013a9919062002523565b856009336001600160a01b03841614806200148957506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200144e57600080fd5b505afa15801562001463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200148991906200268a565b620014d75760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b85620015265760405162461bcd60e51b815260206004820152601e60248201527f5469636b6574426f6f74683a3a69737375653a20454d5054595f4e414d45000060448201526064016200069c565b83620015755760405162461bcd60e51b815260206004820181905260248201527f5469636b6574426f6f74683a3a69737375653a20454d5054595f53594d424f4c60448201526064016200069c565b6000888152602081905260409020546001600160a01b031615620016025760405162461bcd60e51b815260206004820152602260248201527f5469636b6574426f6f74683a3a69737375653a20414c52454144595f4953535560448201527f454400000000000000000000000000000000000000000000000000000000000060648201526084016200069c565b868686866040516200161490620024c9565b620016239493929190620027a8565b604051809103906000f08015801562001640573d6000803e3d6000fd5b506000898152602081905260409081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0393909316929092179091555188907f05f79890a2d2c8e15c45a3a79a0ddc2c45db38d489e7f6948593f1fef566c8ec90620016c2908a908a908a908a903390620027de565b60405180910390a25050505050505050565b60008181526002602090815260408083205491839052909120546001600160a01b031680156200178257806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200173857600080fd5b505afa1580156200174d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017739190620026c4565b6200177f908362002825565b91505b50919050565b8282600b336001600160a01b03841614806200186957506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200182e57600080fd5b505afa15801562001843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200186991906200268a565b806200193a57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015620018ff57600080fd5b505afa15801562001914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200193a91906200268a565b620019885760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b6000858152602081905260409020546001600160a01b031680620019ef5760405162461bcd60e51b815260206004820152601f60248201527f5469636b6574426f6f74683a3a756e7374616b653a204e4f545f464f554e440060448201526064016200069c565b6001600160a01b03871660008181526003602090815260408083208a8452825280832054938352600182528083208a8452909152812054909162001a339162002840565b90508581101562001aad5760405162461bcd60e51b815260206004820152602860248201527f5469636b6574426f6f74683a3a756e7374616b653a20494e535546464943494560448201527f4e545f46554e445300000000000000000000000000000000000000000000000060648201526084016200069c565b6001600160a01b03881660009081526001602090815260408083208a845290915290205462001ade90879062002840565b6001600160a01b03891660009081526001602090815260408083208b845282528083209390935560029052205462001b1890879062002840565b6000888152600260205260409081902091909155517fac6855390000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526024820188905283169063ac68553990604401600060405180830381600087803b15801562001b8e57600080fd5b505af115801562001ba3573d6000803e3d6000fd5b5050604080518981523360208201528a93506001600160a01b038c1692507f8b264d23b1bf5d7d34440338fbbf8e868725712186df7862503c9620ea6e958991016200095c565b6000811162001c3c5760405162461bcd60e51b815260206004820152601a60248201527f5469636b6574426f6f74683a3a756e6c6f636b3a204e4f5f4f5000000000000060448201526064016200069c565b3360009081526004602090815260408083206001600160a01b0387168452825280832085845290915290205481111562001cdf5760405162461bcd60e51b815260206004820152602760248201527f5469636b6574426f6f74683a3a756e6c6f636b3a20494e53554646494349454e60448201527f545f46554e44530000000000000000000000000000000000000000000000000060648201526084016200069c565b6001600160a01b038316600090815260036020908152604080832085845290915290205462001d1090829062002840565b6001600160a01b038416600081815260036020908152604080832087845282528083209490945533825260048152838220928252918252828120858252909152205462001d5f90829062002840565b3360008181526004602090815260408083206001600160a01b03891680855290835281842088855283529281902094909455835185815290810192909252849290917f17a47c3640e01bce0ad23c20907bc651cab2af1b0abc543ae1da119b43de8cca910160405180910390a3505050565b6040517f4fe0eced00000000000000000000000000000000000000000000000000000000815260048101849052839033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634fe0eced9060240160206040518083038186803b15801562001e4f57600080fd5b505afa15801562001e64573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e8a919062002523565b6001600160a01b03161462001ee25760405162461bcd60e51b815260206004820152601d60248201527f5465726d696e616c5574696c6974793a20554e415554484f52495a454400000060448201526064016200069c565b6000831162001f345760405162461bcd60e51b815260206004820152601960248201527f5469636b6574426f6f74683a3a7072696e743a204e4f5f4f500000000000000060448201526064016200069c565b6000848152602081905260408120546001600160a01b03169083801562001f6357506001600160a01b03821615155b9050801562001fef576040517fac6855390000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820187905283169063ac68553990604401600060405180830381600087803b15801562001fd057600080fd5b505af115801562001fe5573d6000803e3d6000fd5b505050506200206a565b6001600160a01b03871660009081526001602090815260408083208984529091529020546200202090869062002825565b6001600160a01b03881660009081526001602090815260408083208a84528252808320939093556002905220546200205a90869062002825565b6000878152600260205260409020555b60408051868152821515602082015285151581830152336060820152905187916001600160a01b038a16917f1d52fee743b6ab8b9037ca51c77fba34120c1ccf69645da4defbb134728698789181900360800190a350505050505050565b8282600d336001600160a01b0384161480620021a957506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200216e57600080fd5b505afa15801562002183573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021a991906200268a565b806200227a57506040517fc161c93f0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156200223f57600080fd5b505afa15801562002254573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200227a91906200268a565b620022c85760405162461bcd60e51b815260206004820152601860248201527f4f706572617461626c653a20554e415554484f52495a4544000000000000000060448201526064016200069c565b600084116200231a5760405162461bcd60e51b815260206004820152601860248201527f5469636b6574426f6f74683a3a6c6f636b3a204e4f5f4f50000000000000000060448201526064016200069c565b6001600160a01b03861660008181526003602090815260408083208984528252808320549383526001825280832089845290915290205485916200235e9162002840565b1015620023d45760405162461bcd60e51b815260206004820152602560248201527f5469636b6574426f6f74683a3a6c6f636b3a20494e53554646494349454e545f60448201527f46554e445300000000000000000000000000000000000000000000000000000060648201526084016200069c565b6001600160a01b03861660009081526003602090815260408083208884529091529020546200240590859062002825565b6001600160a01b03871660008181526003602090815260408083208a84528252808320949094553382526004815283822092825291825282812088825290915220546200245490859062002825565b3360008181526004602090815260408083206001600160a01b038c168085529083528184208b855283529281902094909455835188815290810192909252879290917f75784e97e4541f1b3d2c44d8c51b419e33fb6de615033cfc6e6810db54ffa4fe910160405180910390a3505050505050565b611b3780620028b283390190565b60008083601f840112620024ea57600080fd5b50813567ffffffffffffffff8111156200250357600080fd5b6020830191508360208285010111156200251c57600080fd5b9250929050565b6000602082840312156200253657600080fd5b8151620025438162002889565b9392505050565b6000806000606084860312156200256057600080fd5b83356200256d8162002889565b925060208401356200257f8162002889565b929592945050506040919091013590565b60008060408385031215620025a457600080fd5b8235620025b18162002889565b946020939093013593505050565b600080600060608486031215620025d557600080fd5b8335620025e28162002889565b95602085013595506040909401359392505050565b600080600080608085870312156200260e57600080fd5b84356200261b8162002889565b9350602085013592506040850135915060608501356200263b8162002889565b939692955090935050565b600080600080608085870312156200265d57600080fd5b84356200266a8162002889565b9350602085013592506040850135915060608501356200263b81620028a2565b6000602082840312156200269d57600080fd5b81516200254381620028a2565b600060208284031215620026bd57600080fd5b5035919050565b600060208284031215620026d757600080fd5b5051919050565b600080600080600060608688031215620026f757600080fd5b85359450602086013567ffffffffffffffff808211156200271757600080fd5b6200272589838a01620024d7565b909650945060408801359150808211156200273f57600080fd5b506200274e88828901620024d7565b969995985093965092949392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526000620027be6040830186886200275f565b8281036020840152620027d38185876200275f565b979650505050505050565b606081526000620027f46060830187896200275f565b8281036020840152620028098186886200275f565b9150506001600160a01b03831660408301529695505050505050565b600082198211156200283b576200283b6200285a565b500190565b6000828210156200285557620028556200285a565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001600160a01b03811681146200289f57600080fd5b50565b80151581146200289f57600080fdfe6101406040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610120523480156200003757600080fd5b5060405162001b3738038062001b378339810160408190526200005a91620002f6565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200009092919062000199565b508051620000a690600490602084019062000199565b5050825160209384012082519284019290922060c083815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818a0181905281830198909852606081019590955260808086019390935230858301528051808603909201825293909201909252805194019390932090925261010052506200013f90503362000147565b5050620003b3565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001a79062000360565b90600052602060002090601f016020900481019282620001cb576000855562000216565b82601f10620001e657805160ff191683800117855562000216565b8280016001018555821562000216579182015b8281111562000216578251825591602001919060010190620001f9565b506200022492915062000228565b5090565b5b8082111562000224576000815560010162000229565b600082601f8301126200025157600080fd5b81516001600160401b03808211156200026e576200026e6200039d565b604051601f8301601f19908116603f011681019082821181831017156200029957620002996200039d565b81604052838152602092508683858801011115620002b657600080fd5b600091505b83821015620002da5785820183015181830184015290820190620002bb565b83821115620002ec5760008385830101525b9695505050505050565b600080604083850312156200030a57600080fd5b82516001600160401b03808211156200032257600080fd5b62000330868387016200023f565b935060208501519150808211156200034757600080fd5b5062000356858286016200023f565b9150509250929050565b600181811c908216806200037557607f821691505b602082108114156200039757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e05161010051610120516117346200040360003960006107a601526000610fc60152600061101501526000610ff001526000610f7401526000610f9d01526117346000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063a9059cbb11610081578063d505accf11610066578063d505accf146102b5578063dd62ed3e146102c8578063f2fde38b1461030e57600080fd5b8063a9059cbb1461028f578063ac685539146102a257600080fd5b80638da5cb5b116100b25780638da5cb5b1461024c57806395d89b4114610274578063a457c2d71461027c57600080fd5b8063715018a6146102315780637ecebe001461023957600080fd5b806323b872dd116101245780633644e515116101095780633644e515146101e057806339509351146101e857806370a08231146101fb57600080fd5b806323b872dd146101be578063313ce567146101d157600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd146101975780631e9a6950146101a9575b600080fd5b61015e610321565b60405161016b91906115df565b60405180910390f35b6101876101823660046115b5565b6103b3565b604051901515815260200161016b565b6002545b60405190815260200161016b565b6101bc6101b73660046115b5565b6103c9565b005b6101876101cc366004611506565b610443565b6040516012815260200161016b565b61019b61050f565b6101876101f63660046115b5565b61051e565b61019b6102093660046114b1565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101bc610567565b61019b6102473660046114b1565b6105da565b60065460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161016b565b61015e610607565b61018761028a3660046115b5565b610616565b61018761029d3660046115b5565b6106d4565b6101bc6102b03660046115b5565b6106e1565b6101bc6102c3366004611542565b610752565b61019b6102d63660046114d3565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6101bc61031c3660046114b1565b6108dd565b60606003805461033090611681565b80601f016020809104026020016040519081016040528092919081815260200182805461035c90611681565b80156103a95780601f1061037e576101008083540402835291602001916103a9565b820191906000526020600020905b81548152906001019060200180831161038c57829003601f168201915b5050505050905090565b60006103c03384846109d9565b50600192915050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146104355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61043f8282610b59565b5050565b6000610450848484610d0a565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152902054828110156104f75760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000606482015260840161042c565b61050485338584036109d9565b506001949350505050565b6000610519610f70565b905090565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916103c0918590610562908690611652565b6109d9565b60065473ffffffffffffffffffffffffffffffffffffffff1633146105ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042c565b6105d86000611063565b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120545b92915050565b60606004805461033090611681565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812054828110156106bd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161042c565b6106ca33858584036109d9565b5060019392505050565b60006103c0338484610d0a565b60065473ffffffffffffffffffffffffffffffffffffffff1633146107485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042c565b61043f82826110da565b834211156107a25760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161042c565b60007f00000000000000000000000000000000000000000000000000000000000000008888886107d18c6111e0565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061083982611215565b905060006108498287878761127e565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108c65760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161042c565b6108d18a8a8a6109d9565b50505050505050505050565b60065473ffffffffffffffffffffffffffffffffffffffff1633146109445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161042c565b73ffffffffffffffffffffffffffffffffffffffff81166109cd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161042c565b6109d681611063565b50565b73ffffffffffffffffffffffffffffffffffffffff8316610a615760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161042c565b73ffffffffffffffffffffffffffffffffffffffff8216610aea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8216610be25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015610c7e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260408120838303905560028054849290610cba90849061166a565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b4c565b73ffffffffffffffffffffffffffffffffffffffff8316610d935760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161042c565b73ffffffffffffffffffffffffffffffffffffffff8216610e1c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161042c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610eb85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161042c565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610efc908490611652565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f6291815260200190565b60405180910390a350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461415610fbf57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6006805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff821661113d5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161042c565b806002600082825461114f9190611652565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290611189908490611652565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090208054600181018255905b50919050565b6000610601611222610f70565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156113165760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b8360ff16601b148061132b57508360ff16601c145b61139d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161042c565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156113f1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661147f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161042c565b95945050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146114ac57600080fd5b919050565b6000602082840312156114c357600080fd5b6114cc82611488565b9392505050565b600080604083850312156114e657600080fd5b6114ef83611488565b91506114fd60208401611488565b90509250929050565b60008060006060848603121561151b57600080fd5b61152484611488565b925061153260208501611488565b9150604084013590509250925092565b600080600080600080600060e0888a03121561155d57600080fd5b61156688611488565b965061157460208901611488565b95506040880135945060608801359350608088013560ff8116811461159857600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156115c857600080fd5b6115d183611488565b946020939093013593505050565b600060208083528351808285015260005b8181101561160c578581018301518582016040015282016115f0565b8181111561161e576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115611665576116656116cf565b500190565b60008282101561167c5761167c6116cf565b500390565b600181811c9082168061169557607f821691505b6020821081141561120f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220ec2ba990e968b0e3fe16a46d334d35f73606c5e44306bd3f3cf04b8a8c045fde64736f6c63430008060033a264697066735822122022db20663a4b161d51a668c48ab3f1c7030dbc25a71616c707e35722f1381ffb64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Tickets can be either represented internally staked, or as unstaked ERC-20s. This contract manages these two representations and the conversion between the two.The total supply of a project's tickets and the balance of each account are calculated in this contract.",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "_holder": "The ticket holder to get a balance for.",
          "_projectId": "The project to get the `_hodler`s balance of."
        },
        "returns": {
          "balance": "The balance."
        }
      },
      "constructor": {
        "params": {
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A Projects contract which mints ERC-721's that represent project ownership and transfers.",
          "_terminalDirectory": "A directory of a project's current Juicebox terminal to receive payments in."
        }
      },
      "issue(uint256,string,string)": {
        "details": " Deploys an owner's Ticket ERC-20 token contract.",
        "params": {
          "_name": "The ERC-20's name. \" Juicebox ticket\" will be appended.",
          "_projectId": "The ID of the project being issued tickets.",
          "_symbol": "The ERC-20's symbol. \"j\" will be prepended."
        }
      },
      "lock(address,uint256,uint256)": {
        "details": "Only a ticket holder or an operator can lock its tickets.",
        "params": {
          "_amount": "The amount of tickets to lock.",
          "_holder": "The holder to lock tickets from.",
          "_projectId": "The ID of the project whos tickets are being locked."
        }
      },
      "print(address,uint256,uint256,bool)": {
        "details": "Only a project's current terminal can print its tickets.",
        "params": {
          "_amount": "The amount to print.",
          "_holder": "The address receiving the new tickets.",
          "_preferUnstakedTickets": "Whether ERC20's should be converted automatically if they have been issued.",
          "_projectId": "The project to which the tickets belong."
        }
      },
      "redeem(address,uint256,uint256,bool)": {
        "details": "Only a project's current terminal can redeem its tickets.",
        "params": {
          "_amount": "The amount of tickets being redeemed.",
          "_holder": "The address that owns the tickets being redeemed.",
          "_preferUnstaked": "If the preference is to redeem tickets that have been converted to ERC-20s.",
          "_projectId": "The ID of the project of the tickets being redeemed."
        }
      },
      "stake(address,uint256,uint256)": {
        "details": "Only a ticket holder or an operator can stake its tickets.",
        "params": {
          "_amount": "The amount of tickets to stake.",
          "_holder": "The owner of the tickets to stake.",
          "_projectId": "The ID of the project whos tickets are being staked."
        }
      },
      "totalSupplyOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to get the total supply of."
        },
        "returns": {
          "supply": "The total supply."
        }
      },
      "transfer(address,uint256,uint256,address)": {
        "details": "Only a ticket holder or an operator can transfer its tickets.",
        "params": {
          "_amount": "The amount of tickets to transfer.",
          "_holder": "The holder to transfer tickets from.",
          "_projectId": "The ID of the project whos tickets are being transfered.",
          "_recipient": "The recipient of the tickets."
        }
      },
      "unlock(address,uint256,uint256)": {
        "details": "The address that locked the tickets must be the address that unlocks the tickets.",
        "params": {
          "_amount": "The amount of tickets to unlock.",
          "_holder": "The holder to unlock tickets from.",
          "_projectId": "The ID of the project whos tickets are being unlocked."
        }
      },
      "unstake(address,uint256,uint256)": {
        "details": "Only a ticket holder or an operator can unstake its tickets.",
        "params": {
          "_amount": "The amount of tickets to unstake.",
          "_holder": "The owner of the tickets to unstake.",
          "_projectId": "The ID of the project whos tickets are being unstaked."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": " The total balance of tickets a holder has for a specified project, including staked and unstaked tickets."
      },
      "issue(uint256,string,string)": {
        "notice": " Issues an owner's ERC-20 Tickets that'll be used when unstaking tickets."
      },
      "lock(address,uint256,uint256)": {
        "notice": " Lock a project's tickets, preventing them from being redeemed and from converting to ERC20s."
      },
      "operatorStore()": {
        "notice": "A contract storing operator assignments."
      },
      "print(address,uint256,uint256,bool)": {
        "notice": " Print new tickets."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "redeem(address,uint256,uint256,bool)": {
        "notice": " Redeems tickets."
      },
      "stake(address,uint256,uint256)": {
        "notice": " Stakes ERC20 tickets by burning their supply and creating an internal staked version."
      },
      "terminalDirectory()": {
        "notice": "The direct deposit terminals."
      },
      "totalSupplyOf(uint256)": {
        "notice": " The total supply of tickets for each project, including staked and unstaked tickets."
      },
      "transfer(address,uint256,uint256,address)": {
        "notice": " Allows a ticket holder to transfer its tickets to another account, without unstaking to ERC-20s."
      },
      "unlock(address,uint256,uint256)": {
        "notice": " Unlock a project's tickets."
      },
      "unstake(address,uint256,uint256)": {
        "notice": " Unstakes internal tickets by creating and distributing ERC20 tickets."
      }
    },
    "notice": " Manage Ticket printing, redemption, and account balances.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14044,
        "contract": "contracts/TicketBooth.sol:TicketBooth",
        "label": "ticketsOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(ITickets)18255)"
      },
      {
        "astId": 14051,
        "contract": "contracts/TicketBooth.sol:TicketBooth",
        "label": "stakedBalanceOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 14056,
        "contract": "contracts/TicketBooth.sol:TicketBooth",
        "label": "stakedTotalSupplyOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14063,
        "contract": "contracts/TicketBooth.sol:TicketBooth",
        "label": "lockedBalanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 14072,
        "contract": "contracts/TicketBooth.sol:TicketBooth",
        "label": "lockedBalanceBy",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITickets)18255": {
        "encoding": "inplace",
        "label": "contract ITickets",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_contract(ITickets)18255)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract ITickets)",
        "numberOfBytes": "32",
        "value": "t_contract(ITickets)18255"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}